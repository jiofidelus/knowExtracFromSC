package org.imogene.epicam.client.ui.editor ; public class DistrictSanteEditor extends Composite implements Editor<DistrictSanteProxy>, HasEditorDelegate<DistrictSanteProxy>, HasEditorErrors<DistrictSanteProxy> { interface Binder extends UiBinder<Widget, DistrictSanteEditor> { }  private static final Binder BINDER = GWT.create(Binder.class) ;  protected final EpicamRequestFactory requestFactory ;  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private EditorDelegate<DistrictSanteProxy> delegate ;  private DistrictSanteProxy editedValue ;  //Not used by the editor private boolean hideButtons = false ;  private List<String> locales = Arrays.asList("fr", "en") ;  @UiField @Ignore FieldGroupPanel descriptionSection ;  @UiField ImogTextBox code ;  @UiField(provided = true) ImogLocalizedTextBox nom ;  @UiField(provided = true) ImogLocalizedTextAreaBox description ;  @UiField(provided = true) ImogSingleRelationBox<RegionProxy> region ;  private RegionDataProvider regionDataProvider ;  @UiField @Ignore FieldGroupPanel adresseSection ;  @UiField ImogSingleEnumBox libelle ;  @UiField ImogTextAreaBox complementAdresse ;  @UiField ImogTextBox quartier ;  @UiField ImogTextBox ville ;  @UiField ImogTextBox codePostal ;  @UiField ImogGeoBox coordonnees ;  * Constructor * @param factory the application request factory * @param hideButtons true if the relation field buttons shall be hidden public DistrictSanteEditor(EpicamRequestFactory factory, boolean hideButtons) { this.requestFactory = factory ;  this.hideButtons = hideButtons ;  setRelationFields() ;  nom = new ImogLocalizedTextBox(locales, NLS.constants().locale()) ;  description = new ImogLocalizedTextAreaBox(locales, NLS.constants() .locale()) ;  initWidget(BINDER.createAndBindUi(this)) ;  properties() ;  }  * Constructor * @param factory the application request factory public DistrictSanteEditor(EpicamRequestFactory factory) { this(factory, false) ;  }  * Sets the properties of the fields private void properties() { descriptionSection.setGroupTitle(NLS.constants() .districtSante_group_description()) ;  code.setLabel(NLS.constants().districtSante_field_code()) ;  nom.setLabel(NLS.constants().districtSante_field_nom()) ;  description.setLabel(NLS.constants().districtSante_field_description()) ;  region.setLabel(NLS.constants().districtSante_field_region()) ;  adresseSection.setGroupTitle(NLS.constants() .districtSante_group_adresse()) ;  libelle.setLabel(NLS.constants().districtSante_field_libelle()) ;  libelle.addItem(EpicamEnumConstants.DISTRICTSANTE_LIBELLE_DOMICILE, NLS .constants().districtSante_libelle_domicile_option()) ;  libelle.addItem(EpicamEnumConstants.DISTRICTSANTE_LIBELLE_BUREAU, NLS .constants().districtSante_libelle_bureau_option()) ;  libelle.addItem(EpicamEnumConstants.DISTRICTSANTE_LIBELLE_AUTRE, NLS .constants().districtSante_libelle_autre_option()) ;  complementAdresse.setLabel(NLS.constants() .districtSante_field_complementAdresse()) ;  quartier.setLabel(NLS.constants().districtSante_field_quartier()) ;  ville.setLabel(NLS.constants().districtSante_field_ville()) ;  codePostal.setLabel(NLS.constants().districtSante_field_codePostal()) ;  coordonnees.setLabel(NLS.constants().districtSante_field_coordonnees()) ;  }  * Configures the widgets that manage relation fields private void setRelationFields() { regionDataProvider = new RegionDataProvider(requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden region = new ImogSingleRelationBox<RegionProxy>(regionDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreateRegion() && AccessManager.canEditRegion()) region = new ImogSingleRelationBox<RegionProxy>( regionDataProvider, EpicamRenderer.get()) ;  else region = new ImogSingleRelationBox<RegionProxy>(false, regionDataProvider, EpicamRenderer.get()) ;  }  }  * Sets the edition mode * @param isEdited true to enable the edition of the form public void setEdited(boolean isEdited) { if (isEdited) setFieldEditAccess() ;  else setFieldReadAccess() ;  code.setEdited(isEdited) ;  nom.setEdited(isEdited) ;  description.setEdited(isEdited) ;  region.setEdited(isEdited) ;  libelle.setEdited(isEdited) ;  complementAdresse.setEdited(isEdited) ;  quartier.setEdited(isEdited) ;  ville.setEdited(isEdited) ;  codePostal.setEdited(isEdited) ;  coordonnees.setEdited(isEdited) ;  }  * Configures the visibility of the fields  * in view mode depending on the user privileges private void setFieldReadAccess() { if (!AccessManager.canReadDistrictSanteDescription()) descriptionSection.setVisible(false) ;  if (!AccessManager.canReadDistrictSanteAdresse()) adresseSection.setVisible(false) ;  }  * Configures the visibility of the fields  * in edit mode depending on the user privileges private void setFieldEditAccess() { if (!AccessManager.canEditDistrictSanteDescription()) descriptionSection.setVisible(false) ;  if (!AccessManager.canEditDistrictSanteAdresse()) adresseSection.setVisible(false) ;  }  * Sets the Request Context for the List Editors. public void setRequestContextForListEditors(DistrictSanteRequest ctx) { }  * Manages editor updates when a field value changes private void setFieldValueChangeHandler() { registrations.add(requestFactory.getEventBus().addHandler( FieldValueChangeEvent.TYPE, new FieldValueChangeEvent.Handler() { @Override public void onValueChange(ImogField<?> field) { // field dependent visibility management computeVisibility(field, false) ;  }  } )) ;  }  * Computes the field visibility public void computeVisibility(ImogField<?> source, boolean allValidation) { }  * Setter to inject a Region value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setRegion(RegionProxy value, boolean isLocked) { region.setLocked(isLocked) ;  region.setValue(value) ;  }  private void clearRegionWidget() { region.clear() ;  }  * Configures the handlers of the widgets that manage relation fields private void setRelationHandlers() { region.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (region.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  RegionFormPanel form = new RegionFormPanel(requestFactory, region.getValue().getId(), relationPopup, "region") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  region.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  RegionFormPanel form = new RegionFormPanel(requestFactory, null, relationPopup, "region") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SaveRegionEvent.TYPE, new SaveRegionEvent.Handler() { @Override public void saveRegion(RegionProxy value) { region.setValue(value) ;  }  @Override public void saveRegion(RegionProxy value, String initField) { if (initField.equals("region")) region.setValue(value, true) ;  }  } )) ;  }  * Gets the DistrictSanteProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities * @return public DistrictSanteProxy getEditedValue() { return editedValue ;  }  * Sets the DistrictSanteProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities  * @param editedValue  public void setEditedValue(DistrictSanteProxy editedValue) { this.editedValue = editedValue ;  }  * public void raiseNotUniqueError(String field) { delegate.recordError(BaseNLS.messages().error_not_unique(), null, field) ;  }  * Validate fields values public void validateFields() { // code is a required field if (code.getValue() == null) delegate.recordError(BaseNLS.messages().error_required(), null, "code") ;  // nom is a required field if (nom.getValue() == null) delegate.recordError(BaseNLS.messages().error_required(), null, "nom") ;  // region is a required field if (region.getValue() == null) delegate.recordError(BaseNLS.messages().error_required(), null, "region") ;  }  private void setAllLabelWith(String width) { code.setLabelWidth(width) ;  nom.setLabelWidth(width) ;  description.setLabelWidth(width) ;  region.setLabelWidth(width) ;  libelle.setLabelWidth(width) ;  complementAdresse.setLabelWidth(width) ;  quartier.setLabelWidth(width) ;  ville.setLabelWidth(width) ;  codePostal.setLabelWidth(width) ;  coordonnees.setLabelWidth(width) ;  }  private void setAllBoxWith(int width) { code.setBoxWidth(width) ;  nom.setBoxWidth(width) ;  description.setBoxWidth(width) ;  region.setBoxWidth(width) ;  libelle.setBoxWidth(width) ;  complementAdresse.setBoxWidth(width) ;  quartier.setBoxWidth(width) ;  ville.setBoxWidth(width) ;  codePostal.setBoxWidth(width) ;  coordonnees.setBoxWidth(width) ;  }  @Override public void setDelegate(EditorDelegate<DistrictSanteProxy> delegate) { this.delegate = delegate ;  }  @Override public void showErrors(List<EditorError> errors) { if (errors != null && errors.size() > 0) { List<EditorError> codeFieldErrors = new ArrayList<EditorError>() ;  List<EditorError> nomFieldErrors = new ArrayList<EditorError>() ;  List<EditorError> regionFieldErrors = new ArrayList<EditorError>() ;  for (EditorError error : errors) { Object userData = error.getUserData() ;  if (userData != null && userData instanceof String) { String field = (String) userData ;  if (field.equals("code")) codeFieldErrors.add(error) ;  if (field.equals("nom")) nomFieldErrors.add(error) ;  if (field.equals("region")) regionFieldErrors.add(error) ;  }  }  if (codeFieldErrors.size() > 0) code.showErrors(codeFieldErrors) ;  if (nomFieldErrors.size() > 0) nom.showErrors(nomFieldErrors) ;  if (regionFieldErrors.size() > 0) region.showErrors(regionFieldErrors) ;  }  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override protected void onLoad() { setRelationHandlers() ;  setFieldValueChangeHandler() ;  super.onLoad() ;  } }