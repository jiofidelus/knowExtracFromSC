package org.imogene.epicam.client.ui.editor.nested ; public class DetailRavitaillementEditorNestedForm extends Composite implements Editor<DetailRavitaillementProxy>, HasEditorDelegate<DetailRavitaillementProxy>, HasEditorErrors<DetailRavitaillementProxy> { interface Binder extends UiBinder<Widget, DetailRavitaillementEditorNestedForm> { }  private static final Binder BINDER = GWT.create(Binder.class) ;  protected final EpicamRequestFactory requestFactory ;  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private EditorDelegate<DetailRavitaillementProxy> delegate ;  private boolean hideButtons = false ;  private int index = 0 ;  private boolean isNewProxy = false ;  private boolean isClearImageActive = false ;  @UiField Image clearImage ;  @UiField @Ignore FieldGroupPanel detailRavitaillementSection ;  @UiField(provided = true) SortieLotEditorNestedRow sortieLot ;  private SortieLotDataProvider sortieLotDataProvider ;  @UiField(provided = true) EntreeLotEditorNestedRow entreeLot ;  private EntreeLotDataProvider entreeLotDataProvider ;  * Constructor * @param factory the application request factory * @param hideButtons true if the relation field buttons shall be hidden public DetailRavitaillementEditorNestedForm(EpicamRequestFactory factory, boolean hideButtons) { this.requestFactory = factory ;  this.hideButtons = hideButtons ;  setRelationFields() ;  initWidget(BINDER.createAndBindUi(this)) ;  clearImage.setTitle(BaseNLS.constants().button_remove()) ;  clearImage .setUrl(GWT.getModuleBaseURL() + "images/relation_remove.png") ;  properties() ;  }  * Constructor * @param factory the application request factory public DetailRavitaillementEditorNestedForm(EpicamRequestFactory factory) { this(factory, false) ;  }  * Sets the properties of the fields public void properties() { detailRavitaillementSection.setGroupTitle(NLS.constants() .detailRavitaillement_name()) ;  detailRavitaillementSection.setLabelFontSize("12px") ;  }  * Configures the widgets that manage relation fields public void setRelationFields() { sortieLot = new SortieLotEditorNestedRow(requestFactory) ;  entreeLot = new EntreeLotEditorNestedRow(requestFactory) ;  }  * Sets the edition mode * @param isEdited true to enable the edition of the form public void setEdited(boolean isEdited) { if (isClearImageActive) clearImage.setVisible(isEdited) ;  else clearImage.setVisible(false) ;  if (isEdited) setFieldEditAccess() ;  else setFieldReadAccess() ;  sortieLot.setEdited(isEdited) ;  entreeLot.setEdited(isEdited) ;  }  * Configures the visibility of the fields  * in view mode depending on the user privileges public void setFieldReadAccess() { if (!AccessManager.canReadDetailRavitaillementSortie()) sortieLot.setVisible(false) ;  if (!AccessManager.canReadDetailRavitaillementEntree()) entreeLot.setVisible(false) ;  }  * Configures the visibility of the fields  * in edit mode depending on the user privileges public void setFieldEditAccess() { if (!AccessManager.canEditDetailRavitaillementSortie()) sortieLot.setVisible(false) ;  if (!AccessManager.canEditDetailRavitaillementEntree()) entreeLot.setVisible(false) ;  }  * Sets the Request Context for the List Editors public void setRequestContextForListEditors(ImogEntityRequest ctx) { }  * Manages editor updates when a field value changes private void setFieldValueChangeHandler() { registrations.add(requestFactory.getEventBus().addHandler( FieldValueChangeEvent.TYPE, new FieldValueChangeEvent.Handler() { @Override public void onValueChange(ImogField<?> field) { // field dependent visibility management computeVisibility(field, false) ;  }  } )) ;  }  * Computes the field visibility public void computeVisibility(ImogField<?> source, boolean allValidation) { }  public void setDeleteClickHandler(ClickHandler handler) { //registrations.add(clearImage.addClickHandler(handler)) ;  clearImage.addClickHandler(handler) ;  isClearImageActive = true ;  }  * Configures the handlers of the widgets that manage relation fields private void setRelationHandlers() { }  public void setIndex(int newIndex) { this.index = newIndex ;  }  public int getIndex() { return index ;  }  public boolean isNewProxy() { return isNewProxy ;  }  public void setNewProxy(boolean isNewProxy) { this.isNewProxy = isNewProxy ;  }  * Validate fields values public void validateFields() { // sortieLot nested form shall be validated sortieLot.validateFields() ;  // entreeLot nested form shall be validated entreeLot.validateFields() ;  }  public void updatedetailRavitaillementSectionLabel(String label) { detailRavitaillementSection.setGroupTitle(label) ;  }  @Override public void setDelegate(EditorDelegate<DetailRavitaillementProxy> delegate) { this.delegate = delegate ;  }  @Override public void showErrors(List<EditorError> errors) { if (errors != null && errors.size() > 0) { for (EditorError error : errors) { Object userData = error.getUserData() ;  if (userData != null && userData instanceof String) { String field = (String) userData ;  }  }  }  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override protected void onLoad() { setRelationHandlers() ;  setFieldValueChangeHandler() ;  super.onLoad() ;  } }