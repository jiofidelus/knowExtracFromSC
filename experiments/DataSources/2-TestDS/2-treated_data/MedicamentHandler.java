package org.imogene.epicam.server.handler ; public class MedicamentHandler { private MedicamentDao dao ;  private ImogBeanFilter filter ;  private HandlerHelper handlerHelper ;  * Loads the entity with the specified id * @param entityId the entity id * @return the entity or null @Transactional(readOnly = true) public Medicament findById(String entityId) { return dao.load(entityId) ;  }  * Loads the entity with the specified id * @param entityId the entity id * @return the entity or null @Transactional(readOnly = true) public Medicament getById(String entityId) { return dao.getById(entityId) ;  }  * Saves or updates the entity * @param entity the entity to be saved or updated * @param isNew true if it is a new entity added for the first time. @Transactional public void save(Medicament entity, boolean isNew) { ImogActor actor = HttpSessionUtil.getCurrentUser() ;  if (entity != null) { handlerHelper.prepare(entity) ;  if (entity.getDeleted() != null) entity.setDeleted(null) ;  dao.saveOrUpdate(entity, isNew) ;  }  }  * Saves or updates the bean * @param entity the bean to be saved or updated * @param isNew true if it is a new entity added for the first time. @Transactional public void save(ImogBean entity, boolean isNew) { handlerHelper.save(entity, isNew) ;  }  * Lists the entities of type Medicament * @param sortProperty the property used to sort the collection * @param sortOrder true for an ascendant sort * @return list of medicament @Transactional(readOnly = true) public List<Medicament> listMedicament(String sortProperty, boolean sortOrder) { ImogActor actor = HttpSessionUtil.getCurrentUser() ;  ImogJunction junction = createFilterJuntion(actor) ;  List<Medicament> beans = dao.load(sortProperty, sortOrder, junction) ;  return beans ;  }  * Lists the entities of type Medicament * @param sortProperty the property used to sort the collection * @param sortOrder true for an ascendant sort * @return list of medicament @Transactional(readOnly = true) public List<Medicament> listMedicament(String sortProperty, boolean sortOrder, ImogJunction junction) { List<Medicament> beans = dao.load(sortProperty, sortOrder, junction) ;  return beans ;  }  * Lists the entities of type Medicament * @param i first index to retrieve * @param j nb of items to retrieve * @param sortProperty the property used to sort the collection * @param sortOrder true for an ascendant sort * @return list of medicament @Transactional(readOnly = true) public List<Medicament> listMedicament(int i, int j, String sortProperty, boolean sortOrder) { ImogActor actor = HttpSessionUtil.getCurrentUser() ;  ImogJunction junction = createFilterJuntion(actor) ;  List<Medicament> beans = dao.load(i, j, sortProperty, sortOrder, junction) ;  return beans ;  }  * Lists the entities of type Medicament * @param i first index to retrieve * @param j nb of items to retrieve * @param sortProperty the property used to sort the collection * @param sortOrder true for an ascendant sort * @param criterions request criteria  * @return list of medicament @Transactional(readOnly = true) public List<Medicament> listMedicament(int i, int j, String sortProperty, boolean sortOrder, ImogJunction criterions) { ImogActor actor = HttpSessionUtil.getCurrentUser() ;  ImogJunction junction = createFilterJuntion(actor) ;  if (criterions != null) junction.add(criterions) ;  List<Medicament> beans = dao.load(i, j, sortProperty, sortOrder, junction) ;  return beans ;  }  * Lists the entities of type Medicament * @param i first index to retrieve * @param j nb of items to retrieve * @param sortProperty the property used to sort the collection * @param sortOrder true for an ascendant sort * @param criterions request criteria  * @return list of medicament @Transactional(readOnly = true) public List<Medicament> listMedicament(int i, int j, String sortProperty, boolean sortOrder, List<BasicCriteria> criterions) { ImogActor actor = HttpSessionUtil.getCurrentUser() ;  ImogJunction junction = createFilterJuntion(actor) ;  ImogJunction junctionForCrit = new ImogConjunction() ;  if (criterions != null) { for (BasicCriteria crit : criterions) junctionForCrit.add(crit) ;  }  junction.add(junctionForCrit) ;  List<Medicament> beans = dao.load(i, j, sortProperty, sortOrder, junction) ;  return beans ;  }  * Lists the non affected entities of type Medicament  * @param i first index to retrieve * @param j nb of items to retrieve * @param sortProperty the property used to sort the collection * @param sortOrder true for an ascendant sort * @param criterion request criteria  * @param property the property which is not affected * @return list of medicament @Transactional(readOnly = true) public List<Medicament> listNonAffectedMedicament(int i, int j, String sortProperty, boolean sortOrder, ImogJunction criterions, String property) { ImogActor actor = HttpSessionUtil.getCurrentUser() ;  ImogJunction junction = createFilterJuntion(actor) ;  if (criterions != null) junction.add(criterions) ;  List<Medicament> beans = dao.loadNonAffected(i, j, sortProperty, sortOrder, property, junction) ;  return beans ;  }  * Lists the non affected entities of type Medicament  * @param i first index to retrieve * @param j nb of items to retrieve * @param sortProperty the property used to sort the collection * @param sortOrder true for an ascendant sort * @param property the property which is not affected * @return list of medicament @Transactional(readOnly = true) public List<Medicament> listNonAffectedMedicament(int i, int j, String sortProperty, boolean sortOrder, String property) { return listNonAffectedMedicament(i, j, sortProperty, sortOrder, null, property) ;  }  * Used when Medicament is involved in a Relation 1 <-> 1  * Association and is the ReverseRelationField of the Relation * Return all instance of Medicament non affected * regarding specified property.  * @param i first index to retrieve * @param j nb of items to retrieve * @param sortProperty the property used to sort the collection * @param sortOrder true for an ascendant sort * @param ImogJunction request criteria * @param property the property which is not affected  * @return list of medicament @Transactional(readOnly = true) public List<Medicament> listNonAffectedMedicamentReverse(int i, int j, String sortProperty, boolean sortOrder, ImogJunction criterions, String property) { ImogActor actor = HttpSessionUtil.getCurrentUser() ;  ImogJunction junction = createFilterJuntion(actor) ;  if (criterions != null) junction.add(criterions) ;  List<Medicament> beans = dao.loadNonAffectedReverse(i, j, sortProperty, sortOrder, property, junction) ;  return beans ;  }  * Used when Medicament is involved in a Relation 1 <-> 1  * Association and is the ReverseRelationField of the Relation * Return all instance of Medicament non affected * regarding specified property.  * @param i first index to retrieve * @param j nb of items to retrieve * @param sortProperty the property used to sort the collection * @param sortOrder true for an ascendant sort * @param property the property which is not affected  * @return list of medicament @Transactional(readOnly = true) public List<Medicament> listNonAffectedMedicamentReverse(int i, int j, String sortProperty, boolean sortOrder, String property) { return listNonAffectedMedicamentReverse(i, j, sortProperty, sortOrder, null, property) ;  }  * Gets an empty list of Medicament  * @return an empty list of Medicament @Transactional(readOnly = true) public List<Medicament> getMedicamentEmptyList() { return new ArrayList<Medicament>() ;  }  * Counts the number of medicament in the database * @return the count @Transactional(readOnly = true) public Long countMedicament() { return countMedicament(null) ;  }  * Counts the number of medicament in the database,  * that match the criteria * @return the count @Transactional(readOnly = true) public Long countMedicament(ImogJunction criterions) { ImogActor actor = HttpSessionUtil.getCurrentUser() ;  ImogJunction junction = createFilterJuntion(actor) ;  if (criterions != null) junction.add(criterions) ;  return dao.count(junction) ;  }  * Counts the number of non affected medicament entities in the database * @param property the property which is not affected * @param criterion request criteria * @return the count @Transactional(readOnly = true) public Long countNonAffectedMedicament(String property, ImogJunction criterions) { ImogActor actor = HttpSessionUtil.getCurrentUser() ;  ImogJunction junction = createFilterJuntion(actor) ;  if (criterions != null) junction.add(criterions) ;  return dao.countNonAffected(property, junction) ;  }  * Counts the number of non affected medicament entities in the database * @param property the property which is not affected * @return the count @Transactional(readOnly = true) public Long countNonAffectedMedicament(String property) { return countNonAffectedMedicament(property, null) ;  }  * Counts the number of non affected medicament entities in the database * @param property the property which is not affected * @param criterion request criteria * @return the count @Transactional(readOnly = true) public Long countNonAffectedMedicamentReverse(String property, ImogJunction criterions) { ImogActor actor = HttpSessionUtil.getCurrentUser() ;  ImogJunction junction = createFilterJuntion(actor) ;  if (criterions != null) junction.add(criterions) ;  return dao.countNonAffectedReverse(property, junction) ;  }  * Counts the number of non affected medicament entities in the database * @param property the property which is not affected * @return the count @Transactional(readOnly = true) public Long countNonAffectedMedicamentReverse(String property) { return countNonAffectedMedicamentReverse(property, null) ;  }  * Deletes a group of entities identified by their IDs * @param ids Entities to delete IDs * @return The list of deleted entities IDs @Transactional public void delete(Set<Medicament> entities) { if (entities != null) { for (Medicament entity : entities) delete(entity) ;  }  }  * Removes the specified entity from the database  * @param entity The entity to be deleted @Transactional public void delete(Medicament entity) { handlerHelper.prepareForDelete(entity) ;  dao.saveOrUpdate(entity, false) ;  }  * Removes the specified bean from the database  * @param entity The bean to be deleted @Transactional public void delete(ImogBean entity) { handlerHelper.delete(entity) ;  }  * Lists the entities of type Medicament for the CSV export  @Transactional(readOnly = true) public List<Medicament> listForCsv(String sortProperty, boolean sortOrder, String code, String designation, String estMedicamentAntituberculeux) { ImogActor actor = HttpSessionUtil.getCurrentUser() ;  ImogJunction junction = createFilterJuntion(actor) ;  if (code != null && !code.isEmpty()) { BasicCriteria criteria = new BasicCriteria() ;  criteria.setOperation(CriteriaConstants.STRING_OPERATOR_CONTAINS) ;  criteria.setField("code") ;  criteria.setValue(code) ;  junction.add(criteria) ;  }  if (designation != null && !designation.isEmpty()) { BasicCriteria criteria = new BasicCriteria() ;  criteria.setOperation(CriteriaConstants.STRING_OPERATOR_CONTAINS) ;  criteria.setField("designation") ;  criteria.setValue(designation) ;  junction.add(criteria) ;  }  if (estMedicamentAntituberculeux != null && !estMedicamentAntituberculeux.isEmpty()) { BasicCriteria criteria = new BasicCriteria() ;  criteria.setOperation(CriteriaConstants.BOOLEAN_OPERATOR_EQUAL) ;  criteria.setField("estMedicamentAntituberculeux") ;  criteria.setValue(estMedicamentAntituberculeux) ;  junction.add(criteria) ;  }  List<Medicament> beans = dao.load(sortProperty, sortOrder, junction) ;  List<Medicament> securedBeans = filter.<Medicament> toSecure(beans) ;  return securedBeans ;  }  * Creates a junction based on the filter field declarations, for the current actor. * @param actor the current actor private ImogJunction createFilterJuntion(ImogActor actor) { ImogConjunction filterConjunction = new ImogConjunction() ;  if (!ProfileUtil.isAdmin(actor)) filterConjunction.add(handlerHelper.getNotDeletedFilterCriteria()) ;  return filterConjunction ;  }  * Setter for bean injection * @param dao the Medicament Dao public void setDao(MedicamentDao dao) { this.dao = dao ;  }  * Setter for bean injection * @param imogBeanFilter public void setFilter(ImogBeanFilter filter) { this.filter = filter ;  }  * Setter for bean injection. * @param helper public void setHandlerHelper(HandlerHelper helper) { this.handlerHelper = helper ;  } }