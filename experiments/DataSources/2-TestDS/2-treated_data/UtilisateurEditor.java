package org.imogene.epicam.client.ui.editor ; public class UtilisateurEditor extends Composite implements Editor<UtilisateurProxy>, HasEditorDelegate<UtilisateurProxy>, HasEditorErrors<UtilisateurProxy> { interface Binder extends UiBinder<Widget, UtilisateurEditor> { }  private static final Binder BINDER = GWT.create(Binder.class) ;  protected final EpicamRequestFactory requestFactory ;  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private EditorDelegate<UtilisateurProxy> delegate ;  private UtilisateurProxy editedValue ;  //Not used by the editor private boolean hideButtons = false ;  private String currentLogin = null ;  private boolean showIdentificationSection = false ;  private boolean showContactSection = false ;  @UiField @Ignore FieldGroupPanel identificationSection ;  @UiField ImogTextBox nom ;  @UiField ImogDateBox dateNaissance ;  @UiField ImogTextBox profession ;  @UiField @Ignore FieldGroupPanel contactSection ;  @UiField ImogTextBox telephoneUn ;  @UiField ImogTextBox telephoneDeux ;  @UiField ImogTextBox telephoneTrois ;  @UiField ImogEmailBox email ;  @UiField ImogSingleEnumBox libelle ;  @UiField ImogTextAreaBox complementAdresse ;  @UiField ImogTextBox quartier ;  @UiField ImogTextBox ville ;  @UiField ImogTextBox codePostal ;  @UiField @Ignore FieldGroupPanel administrationSection ;  @UiField ImogTextBox login ;  @UiField ImogPasswordBox password ;  @UiField @Ignore ImogPasswordBox passwordConfirm ;  @UiField(provided = true) ImogMultiRelationBox<ProfileProxy> profiles ;  @UiField @Ignore ImogLinkBox idLink ;  @UiField @Ignore FieldGroupPanel synchronizationSection ;  @UiField(provided = true) ImogMultiRelationBox<CardEntityProxy> synchronizables ;  * Constructor * @param factory the application request factory * @param hideButtons true if the relation field buttons shall be hidden public UtilisateurEditor(EpicamRequestFactory factory, boolean hideButtons) { this.requestFactory = factory ;  this.hideButtons = hideButtons ;  setRelationFields() ;  initWidget(BINDER.createAndBindUi(this)) ;  properties() ;  }  * Constructor * @param factory the application request factory public UtilisateurEditor(EpicamRequestFactory factory) { this(factory, false) ;  }  * Sets the properties of the fields private void properties() { identificationSection.setGroupTitle(NLS.constants() .utilisateur_group_identification()) ;  nom.setLabel(NLS.constants().utilisateur_field_nom()) ;  dateNaissance.setLabel(NLS.constants() .utilisateur_field_dateNaissance()) ;  profession.setLabel(NLS.constants().utilisateur_field_profession()) ;  contactSection.setGroupTitle(NLS.constants() .utilisateur_group_contact()) ;  telephoneUn.setLabel(NLS.constants().utilisateur_field_telephoneUn()) ;  telephoneDeux.setLabel(NLS.constants() .utilisateur_field_telephoneDeux()) ;  telephoneTrois.setLabel(NLS.constants() .utilisateur_field_telephoneTrois()) ;  email.setLabel(NLS.constants().utilisateur_field_email()) ;  libelle.setLabel(NLS.constants().utilisateur_field_libelle()) ;  libelle.addItem(EpicamEnumConstants.UTILISATEUR_LIBELLE_DOMICILE, NLS .constants().utilisateur_libelle_domicile_option()) ;  libelle.addItem(EpicamEnumConstants.UTILISATEUR_LIBELLE_BUREAU, NLS .constants().utilisateur_libelle_bureau_option()) ;  libelle.addItem(EpicamEnumConstants.UTILISATEUR_LIBELLE_AUTRE, NLS .constants().utilisateur_libelle_autre_option()) ;  complementAdresse.setLabel(NLS.constants() .utilisateur_field_complementAdresse()) ;  quartier.setLabel(NLS.constants().utilisateur_field_quartier()) ;  ville.setLabel(NLS.constants().utilisateur_field_ville()) ;  codePostal.setLabel(NLS.constants().utilisateur_field_codePostal()) ;  administrationSection.setGroupTitle(AdminNLS.constants() .imogActor_group_administration()) ;  login.setLabel(AdminNLS.constants().imogActor_field_login()) ;  password.setLabel(AdminNLS.constants().imogActor_field_password()) ;  passwordConfirm.setLabel(AdminNLS.constants() .imogActor_field_passwordConfirm()) ;  profiles.setLabel(AdminNLS.constants().imogActor_field_roleList()) ;  profiles.hideButtons(true) ;  idLink.setLabel(AdminNLS.constants().imogActor_field_idFile()) ;  synchronizationSection.setGroupTitle(AdminNLS.constants() .imogActor_group_synchronization()) ;  synchronizables.setLabel(AdminNLS.constants() .imogActor_field_synchronizableList()) ;  synchronizables.hideButtons(true) ;  // hide the fields that are not admin fields and show only the field groups that contain admin fields showIdentificationSection = true ;  showIdentificationSection = true ;  showIdentificationSection = true ;  telephoneUn.setVisible(false) ;  telephoneDeux.setVisible(false) ;  telephoneTrois.setVisible(false) ;  email.setVisible(false) ;  libelle.setVisible(false) ;  complementAdresse.setVisible(false) ;  quartier.setVisible(false) ;  ville.setVisible(false) ;  codePostal.setVisible(false) ;  }  * Configures the widgets that manage relation fields private void setRelationFields() { ProfileDataProvider profilesDataProvider ;  profilesDataProvider = new ProfileDataProvider(requestFactory) ;  profiles = new ImogMultiRelationBox<ProfileProxy>(profilesDataProvider, AdminRenderer.get(), true) ;  profiles.setPopUpTitle(AdminNLS.constants().profile_select_title()) ;  CardEntityDataProvider synchronizablesDataProvider ;  synchronizablesDataProvider = new CardEntityDataProvider(requestFactory) ;  synchronizables = new ImogMultiRelationBox<CardEntityProxy>( synchronizablesDataProvider, EpicamAdminUtilRenderer.get(), true, 100) ;  synchronizables.setPopUpTitle(AdminNLS.constants() .cardEntity_select_title()) ;  synchronizables.setFilterPanel(new CardEntityFilterPanel()) ;  }  * Sets the edition mode * @param isEdited true to enable the edition of the form public void setEdited(boolean isEdited) { if (isEdited) setFieldEditAccess() ;  else setFieldReadAccess() ;  nom.setEdited(isEdited) ;  dateNaissance.setEdited(isEdited) ;  profession.setEdited(isEdited) ;  telephoneUn.setEdited(isEdited) ;  telephoneDeux.setEdited(isEdited) ;  telephoneTrois.setEdited(isEdited) ;  email.setEdited(isEdited) ;  libelle.setEdited(isEdited) ;  complementAdresse.setEdited(isEdited) ;  quartier.setEdited(isEdited) ;  ville.setEdited(isEdited) ;  codePostal.setEdited(isEdited) ;  login.setEdited(isEdited) ;  password.setEdited(isEdited) ;  passwordConfirm.setEdited(isEdited) ;  profiles.setEdited(isEdited) ;  idLink.setVisible(!isEdited) ;  synchronizables.setEdited(isEdited) ;  }  * Configures the visibility of the fields  * in view mode depending on the user privileges private void setFieldReadAccess() { if (!AccessManager.canReadUtilisateurIdentification() || !showIdentificationSection) identificationSection.setVisible(false) ;  if (!AccessManager.canReadUtilisateurContact() || !showContactSection) contactSection.setVisible(false) ;  if (!ProfileUtil.isAdmin()) { administrationSection.setVisible(false) ;  synchronizationSection.setVisible(false) ;  }  }  * Configures the visibility of the fields  * in edit mode depending on the user privileges private void setFieldEditAccess() { if (!AccessManager.canEditUtilisateurIdentification() || !showIdentificationSection) identificationSection.setVisible(false) ;  if (!AccessManager.canEditUtilisateurContact() || !showContactSection) contactSection.setVisible(false) ;  if (!ProfileUtil.isAdmin()) { administrationSection.setVisible(false) ;  synchronizationSection.setVisible(false) ;  }  }  * Sets the Request Context for the List Editors. public void setRequestContextForListEditors(UtilisateurRequest ctx) { }  * Manages editor updates when a field value changes private void setFieldValueChangeHandler() { registrations.add(requestFactory.getEventBus().addHandler( FieldValueChangeEvent.TYPE, new FieldValueChangeEvent.Handler() { @Override public void onValueChange(ImogField<?> field) { // field dependent visibility management computeVisibility(field, false) ;  }  } )) ;  }  * Computes the field visibility public void computeVisibility(ImogField<?> source, boolean allValidation) { }  * Gets the UtilisateurProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities * @return public UtilisateurProxy getEditedValue() { return editedValue ;  }  * Sets the UtilisateurProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities  * @param editedValue  public void setEditedValue(UtilisateurProxy editedValue) { this.editedValue = editedValue ;  }  * public void raiseNotUniqueError(String field) { delegate.recordError(BaseNLS.messages().error_not_unique(), null, field) ;  }  * Validate fields values public void validateFields() { // nom is a required field if (nom.getValue() == null) delegate.recordError(BaseNLS.messages().error_required(), null, "nom") ;  }  * Validates that when the login is changed, the password is changed too public void validateLoginWithPassword() { String newLogin = login.getValue() ;  if (newLogin != null) { if (currentLogin != null) { if (!currentLogin.equals(newLogin)) { if (!passwordChanged()) delegate.recordError(AdminNLS.constants() .login_without_password_error(), null, "login") ;  }  }  else { if (!passwordChanged()) delegate.recordError(AdminNLS.constants() .login_without_password_error(), null, "login") ;  }  }  }  * Validates that the password is confirmed by the second entry public boolean validatePasword() { boolean isValid = true ;  String password1 = password.getValue() ;  String password2 = passwordConfirm.getValue() ;  if (!(password1 == null && password2 == null)) { if ((password1 != null && password2 == null) || (password2 != null && password1 == null)) { delegate.recordError(AdminNLS.constants() .password_confirm_error(), null, "password") ;  isValid = false ;  }  if (!password1.equals(password2)) { delegate.recordError(AdminNLS.constants() .password_confirm_error(), null, "password") ;  isValid = false ;  }  }  return isValid ;  }  * Tells if the password has been changed public boolean passwordChanged() { return !(password.getValue() == null && passwordConfirm.getValue() == null) ;  }  * Stores the login of the actor public void setCurrentLogin() { this.currentLogin = login.getValue() ;  }  * Set the link to download  * the associated identification file public void updateIdLink(String entityId) { idLink.setValue("<a href=\"" + GWT.getHostPageBaseURL() + "encrypt?type=USR&id=" + entityId + "\">" + AdminNLS.constants().imogActor_field_idFile_text() + "</a>") ;  }  private void setAllLabelWith(String width) { nom.setLabelWidth(width) ;  dateNaissance.setLabelWidth(width) ;  profession.setLabelWidth(width) ;  telephoneUn.setLabelWidth(width) ;  telephoneDeux.setLabelWidth(width) ;  telephoneTrois.setLabelWidth(width) ;  email.setLabelWidth(width) ;  libelle.setLabelWidth(width) ;  complementAdresse.setLabelWidth(width) ;  quartier.setLabelWidth(width) ;  ville.setLabelWidth(width) ;  codePostal.setLabelWidth(width) ;  }  private void setAllBoxWith(int width) { nom.setBoxWidth(width) ;  profession.setBoxWidth(width) ;  telephoneUn.setBoxWidth(width) ;  telephoneDeux.setBoxWidth(width) ;  telephoneTrois.setBoxWidth(width) ;  email.setBoxWidth(width) ;  libelle.setBoxWidth(width) ;  complementAdresse.setBoxWidth(width) ;  quartier.setBoxWidth(width) ;  ville.setBoxWidth(width) ;  codePostal.setBoxWidth(width) ;  }  @Override public void setDelegate(EditorDelegate<UtilisateurProxy> delegate) { this.delegate = delegate ;  }  @Override public void showErrors(List<EditorError> errors) { if (errors != null && errors.size() > 0) { List<EditorError> nomFieldErrors = new ArrayList<EditorError>() ;  for (EditorError error : errors) { Object userData = error.getUserData() ;  if (userData != null && userData instanceof String) { String field = (String) userData ;  if (field.equals("nom")) nomFieldErrors.add(error) ;  if (field.equals("password")) { List<EditorError> fieldErrors = new ArrayList<EditorError>() ;  fieldErrors.add(error) ;  passwordConfirm.showErrors(fieldErrors) ;  }  if (field.equals("login")) { List<EditorError> fieldErrors = new ArrayList<EditorError>() ;  fieldErrors.add(error) ;  login.showErrors(fieldErrors) ;  }  }  }  if (nomFieldErrors.size() > 0) nom.showErrors(nomFieldErrors) ;  }  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override protected void onLoad() { setFieldValueChangeHandler() ;  super.onLoad() ;  } }