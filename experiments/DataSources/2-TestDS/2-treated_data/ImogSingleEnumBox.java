package org.imogene.web.client.ui.field ; public class ImogSingleEnumBox extends Composite implements ImogField<String>, LeafValueEditor<String>, HasEditorErrors<String> { private static final Binder uiBinder = GWT.create(Binder.class) ;  interface Binder extends UiBinder<Widget, ImogSingleEnumBox> { }  private boolean edited = false ;  @UiField ImogErrorLabel errorLabel ;  @UiField @Ignore ImogFieldAbstract fieldBox ;  @UiField @Ignore ListBox listBox ;  @UiField @Ignore TextBox textBox ;  public ImogSingleEnumBox() { initWidget(uiBinder.createAndBindUi(this)) ;  listBox.addItem("", BaseNLS.constants().enumeration_unknown()) ;  listBox.setSelectedIndex(0) ;  textBox.setVisible(false) ;  }  @Override public void setLabel(String label) { fieldBox.setLabel(label) ;  }  public void setLabel(String label, HorizontalAlignmentConstant alignment) { fieldBox.setLabel(label, alignment) ;  }  @Override public boolean isEdited() { return edited ;  }  public String getValue() { String result = listBox.getValue(listBox.getSelectedIndex()) ;  if (result.equals("")) return null ;  else return result ;  }  public void setValue(String value) { listBox.setSelectedIndex(0) ;  for (int i = 0 ;  i < listBox.getItemCount() ;  i++) { if (listBox.getValue(i).equals(value)) { listBox.setSelectedIndex(i) ;  return ;  }  }  }  public void setEdited(boolean enabled) { listBox.setEnabled(enabled) ;  // if(!enabled){ // listBox.addStyleDependentName("disabled") ;  // } else{ // listBox.removeStyleDependentName("disabled") ;  // }  if (!enabled) { listBox.addStyleDependentName("disabled") ;  String itemText = listBox.getItemText(listBox.getSelectedIndex()) ;  listBox.setVisible(false) ;  textBox.setText(itemText) ;  textBox.setVisible(true) ;  }  else { listBox.removeStyleDependentName("disabled") ;  textBox.setVisible(false) ;  listBox.setVisible(true) ;  }  edited = enabled ;  }  * Removes all the items from the enumeration field public void removeItems() { listBox.clear() ;  }  * Add an item to the enumeration field. * @param label the item label * @param value the item value. public void addItem(String value, String label) { listBox.addItem(label, value) ;  }  * Sets the widget's width public void setBoxWidth(int width) { listBox.getElement().getStyle().setProperty("width", width + "px") ;  textBox.getElement().getStyle().setProperty("width", width + "px") ;  }  * Defines that the field shall notify value changes * @param eventBusthe event bus that will be used to fire the value change events public void notifyChanges(final EventBus eventBus) { if (eventBus != null) { listBox.addChangeHandler(new ChangeHandler() { @Override public void onChange(ChangeEvent event) { eventBus.fireEvent(new FieldValueChangeEvent( ImogSingleEnumBox.this)) ;  }  } ) ;  }  }  @Override public void showErrors(List<EditorError> errors) { errorLabel.showErrors(errors) ;  }  public void hideErrors() { errorLabel.hideErrors() ;  }  public void setLabelWidth(String width) { fieldBox.setLabelWidth(width) ;  } }