package org.imogene.web.client.ui.field ; public class ImogEmailBox extends Composite implements ImogField<String>, LeafValueEditor<String>, HasEditorErrors<String>, HasEditorDelegate<String> { private static final Binder uiBinder = GWT.create(Binder.class) ;  interface Binder extends UiBinder<Widget, ImogEmailBox> { }  public static final String EMAIL_REGEX = "[a-zA-Z][\\w\\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\\w\\.-]*[a-zA-Z0-9]\\.[a-zA-Z][a-zA-Z\\.]*[a-zA-Z]" ;  private boolean edited = false ;  private boolean isValid = true ;  private boolean clickable = true ;  private EditorDelegate<String> delegate ;  @UiField @Ignore ImogFieldAbstract fieldBox ;  @UiField ImogErrorLabel errorLabel ;  @UiField @Ignore TextBox textBox ;  @UiField @Ignore Image email ;  public ImogEmailBox() { initWidget(uiBinder.createAndBindUi(this)) ;  email.setUrl(GWT.getModuleBaseURL() + "/images/email.png") ;  }  public void setEdited(boolean enabled) { textBox.setEnabled(enabled) ;  if (!enabled) { textBox.addStyleDependentName("disabled") ;  email.addStyleDependentName("clickable") ;  }  else { textBox.removeStyleDependentName("disabled") ;  email.removeStyleDependentName("clickable") ;  }  edited = enabled ;  clickable = !enabled ;  }  @Override public void setLabel(String label) { fieldBox.setLabel(label) ;  }   public void setLabel(String label, HorizontalAlignmentConstant alignment) { fieldBox.setLabel(label, alignment) ;  }  @Override public boolean isEdited() { return edited ;  }  @Override public void showErrors(List<EditorError> errors) { errorLabel.showErrors(errors) ;  }  @UiHandler("email") void handleClick(ClickEvent e) { if (clickable && textBox.getText().length() > 0) Window.open("mailto:" + textBox.getText(), "email", "") ;  }  @Override public void setValue(String value) { textBox.setValue(value) ;   }  @Override public String getValue() { String result = textBox.getValue() ;  isValid = true ;  if (!result.isEmpty() && !result.matches(EMAIL_REGEX)) { isValid = false ;  delegate.recordError(BaseNLS.messages().error_format_email(), result, null) ;  }  if (result.isEmpty()) return null ;  else return result ;  }   * Used to get the value without throwing an error message * @return * @throws ParseException public String getValueWithoutError() { String result = textBox.getValue() ;  isValid = true ;  if (!result.isEmpty() && !result.matches(EMAIL_REGEX)) { isValid = false ;  }  if (result.isEmpty()) return null ;  else return result ;  }   * Tells if the entered value is a valid Integer * @return public boolean isValid() { return isValid ;  }   * Defines that the field shall notify value changes * @param eventBus the event bus that will be used to fire the value change events public void notifyChanges(final EventBus eventBus) { if(eventBus!=null) { textBox.addValueChangeHandler(new ValueChangeHandler<String>() {  @Override public void onValueChange(ValueChangeEvent<String> arg0) { eventBus.fireEvent(new FieldValueChangeEvent(ImogEmailBox.this)) ;  }  } ) ;   }  }  @Override public void setDelegate(EditorDelegate<String> delegate) { this.delegate = delegate ;  }   public void setLabelWidth(String width) { fieldBox.setLabelWidth(width) ;  }   * Sets the widget's width public void setBoxWidth(int width) { textBox.getElement().getStyle().setProperty("width", width + "px") ;  } }