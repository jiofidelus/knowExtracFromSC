package org.imogene.epicam.client.ui.editor.nested ; public class ExamenBiologiqueEditorNestedForm extends Composite implements Editor<ExamenBiologiqueProxy>, HasEditorDelegate<ExamenBiologiqueProxy>, HasEditorErrors<ExamenBiologiqueProxy> { interface Binder extends UiBinder<Widget, ExamenBiologiqueEditorNestedForm> { }  private static final Binder BINDER = GWT.create(Binder.class) ;  protected final EpicamRequestFactory requestFactory ;  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private EditorDelegate<ExamenBiologiqueProxy> delegate ;  private boolean hideButtons = false ;  private int index = 0 ;  private boolean isNewProxy = false ;  private boolean isClearImageActive = false ;  @UiField Image clearImage ;  @UiField @Ignore FieldGroupPanel examenBiologiqueSection ;  @UiField ImogDateBox date ;  @UiField ImogDoubleBox poids ;  @UiField ImogTextAreaBox observations ;  * Constructor * @param factory the application request factory * @param hideButtons true if the relation field buttons shall be hidden public ExamenBiologiqueEditorNestedForm(EpicamRequestFactory factory, boolean hideButtons) { this.requestFactory = factory ;  this.hideButtons = hideButtons ;  initWidget(BINDER.createAndBindUi(this)) ;  clearImage.setTitle(BaseNLS.constants().button_remove()) ;  clearImage .setUrl(GWT.getModuleBaseURL() + "images/relation_remove.png") ;  properties() ;  }  * Constructor * @param factory the application request factory public ExamenBiologiqueEditorNestedForm(EpicamRequestFactory factory) { this(factory, false) ;  }  * Sets the properties of the fields public void properties() { examenBiologiqueSection.setGroupTitle(NLS.constants() .examenBiologique_name()) ;  examenBiologiqueSection.setLabelFontSize("12px") ;  date.setLabel(NLS.constants().examenBiologique_field_date()) ;  poids.setLabel(NLS.constants().examenBiologique_field_poids()) ;  observations.setLabel(NLS.constants() .examenBiologique_field_observations()) ;  }  * Sets the edition mode * @param isEdited true to enable the edition of the form public void setEdited(boolean isEdited) { if (isClearImageActive) clearImage.setVisible(isEdited) ;  else clearImage.setVisible(false) ;  if (isEdited) setFieldEditAccess() ;  else setFieldReadAccess() ;  date.setEdited(isEdited) ;  poids.setEdited(isEdited) ;  observations.setEdited(isEdited) ;  }  * Configures the visibility of the fields  * in view mode depending on the user privileges public void setFieldReadAccess() { if (!AccessManager.canReadExamenBiologiqueDescription()) date.setVisible(false) ;  if (!AccessManager.canReadExamenBiologiqueDescription()) poids.setVisible(false) ;  if (!AccessManager.canReadExamenBiologiqueDescription()) observations.setVisible(false) ;  }  * Configures the visibility of the fields  * in edit mode depending on the user privileges public void setFieldEditAccess() { if (!AccessManager.canEditExamenBiologiqueDescription()) date.setVisible(false) ;  if (!AccessManager.canEditExamenBiologiqueDescription()) poids.setVisible(false) ;  if (!AccessManager.canEditExamenBiologiqueDescription()) observations.setVisible(false) ;  }  * Sets the Request Context for the List Editors public void setRequestContextForListEditors(ImogEntityRequest ctx) { }  * Manages editor updates when a field value changes private void setFieldValueChangeHandler() { registrations.add(requestFactory.getEventBus().addHandler( FieldValueChangeEvent.TYPE, new FieldValueChangeEvent.Handler() { @Override public void onValueChange(ImogField<?> field) { // field dependent visibility management computeVisibility(field, false) ;  }  } )) ;  }  * Computes the field visibility public void computeVisibility(ImogField<?> source, boolean allValidation) { }  public void setDeleteClickHandler(ClickHandler handler) { //registrations.add(clearImage.addClickHandler(handler)) ;  clearImage.addClickHandler(handler) ;  isClearImageActive = true ;  }  public void setIndex(int newIndex) { this.index = newIndex ;  }  public int getIndex() { return index ;  }  public boolean isNewProxy() { return isNewProxy ;  }  public void setNewProxy(boolean isNewProxy) { this.isNewProxy = isNewProxy ;  }  * Validate fields values public void validateFields() { // date is a required field if (date.getValueWithoutParseException() == null && date.isValid()) delegate.recordError(BaseNLS.messages().error_required(), null, "date") ;  // poids is a required field if (poids.getValueWithoutParseException() == null && poids.isValid()) delegate.recordError(BaseNLS.messages().error_required(), null, "poids") ;  }  public void updateexamenBiologiqueSectionLabel(String label) { examenBiologiqueSection.setGroupTitle(label) ;  }  @Override public void setDelegate(EditorDelegate<ExamenBiologiqueProxy> delegate) { this.delegate = delegate ;  }  @Override public void showErrors(List<EditorError> errors) { if (errors != null && errors.size() > 0) { List<EditorError> dateFieldErrors = new ArrayList<EditorError>() ;  List<EditorError> poidsFieldErrors = new ArrayList<EditorError>() ;  for (EditorError error : errors) { Object userData = error.getUserData() ;  if (userData != null && userData instanceof String) { String field = (String) userData ;  if (field.equals("date")) dateFieldErrors.add(error) ;  if (field.equals("poids")) poidsFieldErrors.add(error) ;  }  }  if (dateFieldErrors.size() > 0) date.showErrors(dateFieldErrors) ;  if (poidsFieldErrors.size() > 0) poids.showErrors(poidsFieldErrors) ;  }  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override protected void onLoad() { setFieldValueChangeHandler() ;  super.onLoad() ;  } }