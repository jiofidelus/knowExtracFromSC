package org.imogene.epicam.client ; public class EpicamEntryPoint implements EntryPoint, ValueChangeHandler<String> { interface Binder extends UiBinder<Widget, EpicamEntryPoint> { }  private static final Logger log = Logger.getLogger(EpicamEntryPoint.class .getName()) ;  private static List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private static String APPLICATION_VERSION = "0.0.1" ;  private static final int LOGOUT_TIMEOUT = 333 ;  public static GlassPanel GP = new GlassPanel() ;  private static String COOKIE_NAME = "imogene-epicam-admin" ;  private final long COOKIE_DURATION = 1000 * 60 * 60 * 24 * 2 ;  protected final EpicamRequestFactory requestFactory = GWT .create(EpicamRequestFactory.class) ;  protected EventBus eventBus = new SimpleEventBus() ;  private Timer sessionTimer ;  private int historyCount = 0 ;  @UiField VerticalPanel mainPanel ;  @UiField MainContentPanel content ;  @UiField(provided = true) TopBannerPanel topPanel ;  * This is the entry point method public void onModuleLoad() { GWT.setUncaughtExceptionHandler(new UncaughtExceptionHandler() { public void onUncaughtException(Throwable e) { log.log(Level.SEVERE, e.getMessage(), e) ;  }  } ) ;  requestFactory.initialize(eventBus) ;  // get session info and set info in local session SessionRequest request = requestFactory.sessionInfoRequest() ;  Request<SessionInfoProxy> sessionInfoRequest = request.getSessionInfo() ;  sessionInfoRequest.with("actor.profiles") ;  sessionInfoRequest.with("actor.profiles.entityProfiles") ;  sessionInfoRequest.with("actor.profiles.entityProfiles.entity") ;  sessionInfoRequest.with("actor.profiles.fieldGroupProfiles") ;  sessionInfoRequest.with("actor.profiles.fieldGroupProfiles.fieldGroup") ;  sessionInfoRequest.to(new Receiver<SessionInfoProxy>() { @Override public void onFailure(ServerFailure error) { Window.alert(BaseNLS.constants().connexion_error()) ;  }  @Override public void onSuccess(SessionInfoProxy sessionInfo) { if (sessionInfo != null && sessionInfo.getActor() != null) { ImogActorProxy actor = sessionInfo.getActor() ;  LocalSession.get().setCurrentUser(actor) ;  LocalSession.get().setVersionNumber(APPLICATION_VERSION) ;  displayApplication(actor) ;  initializeCookie(sessionInfo.getSessionId()) ;  }  else logout() ;  }  } ).fire() ;  }  * Initialize the cookie private void initializeCookie(String sessionId) { String cookieValue = Cookies.getCookie(COOKIE_NAME) ;  if (cookieValue == null || !sessionId.equals(cookieValue)) { Cookies.setCookie(COOKIE_NAME, sessionId, new Date(System.currentTimeMillis() + COOKIE_DURATION)) ;  }  launchSessionTimer() ;  }  * Create the user interface protected void displayApplication(ImogActorProxy actor) { registrations.add(History.addValueChangeHandler(this)) ;  //History.fireCurrentHistoryState() ;  RootPanel.get("loadingWrapper").setVisible(false) ;  // construct layout topPanel = new TopBannerPanel(eventBus, actor) ;  // get parent panel RootPanel root = RootPanel.get("root") ;  root.add(GWT.<Binder> create(Binder.class).createAndBindUi(this)) ;  // add first level panel  setContentPanel(getHomePanel()) ;  topPanel.hideTitle() ;  // configure Admin renderer AdminRenderer.get().setFormTypeUtil(EpicamFormTypes.get()) ;  // add handlers setHandlers() ;  // throw the current history token History.fireCurrentHistoryState() ;  }  * Gets the module Home panel * @return protected Composite getHomePanel() { return new HomePanel(eventBus) ;  }  * Sets the module content panel * @param c the panel to be displayed in the module content panel public void setContentPanel(Composite c) { content.setContent(c) ;  }  * Logouts the user from the application private void logout() { if (sessionTimer != null) { sessionTimer.cancel() ;  sessionTimer = null ;  }  Cookies.removeCookie(COOKIE_NAME) ;  LocalSession.get().setCurrentUser(null) ;  // WARNING -> Workaround to the re-connection problem Timer logoutTimer = new Timer() { public void run() { SessionRequest request = requestFactory.sessionInfoRequest() ;  Request<Void> disconnectRequest = request.disconnect() ;  disconnectRequest.to(new Receiver<Void>() { @Override public void onFailure(ServerFailure error) { clearModule() ;  }  @Override public void onSuccess(Void result) { clearModule() ;  }  } ).fire() ;  }  }  ;  logoutTimer.schedule(LOGOUT_TIMEOUT) ;  }  * Launch a timer that checks every 5s that the current user  * session is valid. If it isn't (because the session expired), * then it displays the login form. private void launchSessionTimer() { if (sessionTimer != null) { //Window.alert("Session timer is not null") ;  }  else { sessionTimer = new Timer() { public void run() { SessionRequest request = requestFactory .sessionInfoRequest() ;  Request<Boolean> validateSessionRequest = request .validateSession(Cookies.getCookie(COOKIE_NAME)) ;  validateSessionRequest.to(new Receiver<Boolean>() { @Override public void onFailure(ServerFailure error) { //logout() ;  }  @Override public void onSuccess(Boolean result) { if (result == null || !result) { logout() ;  }  }  } ).fire() ;  }  }  ;  }  sessionTimer.cancel() ;  sessionTimer.scheduleRepeating(5000) ;  }  * Clears the module from its panels private void clearModule() { RootPanel.get().clear() ;  topPanel = null ;  content = null ;  mainPanel = null ;  removeHandlers() ;  String href = GWT.getHostPageBaseURL() + "jsp/Login.jsp" ;  Window.Location.assign(href) ;  }  *  * @param panel private void displayWrapperPanel(Widget panel) { topPanel.showTitle() ;  topPanel.showLocaleList(false) ;  content.setContent(panel) ;  }  * Remove the application level handlers protected static void removeHandlers() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  }  * protected <T extends EventHandler> void registerHandler(Type<T> type, T eventHandler) { registrations.add(eventBus.addHandler(type, eventHandler)) ;  }  * Set the application level handlers private void setHandlers() { registrations.add(eventBus.addHandler(ViewEpicamMapEvent.TYPE, new ViewEpicamMapEvent.Handler() { public void viewMap() { EpicamMap map = new EpicamMap(requestFactory) ;  map.setAutoHideEnabled(true) ;  map.setPopupPosition(80, 20) ;  map.show() ;  }  } )) ;  registrations.add(eventBus.addHandler(GoHomeEvent.TYPE, new GoHomeEvent.Handler() { public void goHome() { content.setContent(getHomePanel()) ;  topPanel.hideTitle() ;  topPanel.showLocaleList(true) ;  }  } )) ;  registrations.add(eventBus.addHandler(LogoutEvent.TYPE, new LogoutEvent.Handler() { public void onLogout() { logout() ;  }  } )) ;  registrations.add(eventBus.addHandler(HistoryBackEvent.TYPE, new HistoryBackEvent.Handler() { @Override public void onHistoryBackRequest() { if (historyCount > 1) { History.back() ;  historyCount-- ;  }  else { History.newItem("") ;  }  }  } )) ;  * Handlers for entity Personnel  registrations.add(eventBus.addHandler(CreatePersonnelEvent.TYPE, new CreatePersonnelEvent.Handler() { public void createNewPersonnel(GwtEvent<?> closeEvent) { if (AccessManager.canCreatePersonnel() && AccessManager.canEditPersonnel()) { PersonnelFormPanel personnelForm = new PersonnelFormPanel( requestFactory, null) ;  personnelForm.setCloseEvent(closeEvent) ;  displayWrapperPanel(personnelForm) ;  }  }  } )) ;  registrations.add(eventBus.addHandler(ViewPersonnelEvent.TYPE, new ViewPersonnelEvent.Handler() { public void viewPersonnel(String entityId, GwtEvent<?> closeEvent) { if (AccessManager.canReadPersonnel()) { PersonnelFormPanel personnelForm = new PersonnelFormPanel( requestFactory, entityId) ;  personnelForm.setCloseEvent(closeEvent) ;  displayWrapperPanel(personnelForm) ;  }  }  } )) ;  registrations.add(eventBus.addHandler(ListPersonnelEvent.TYPE, new ListPersonnelEvent.Handler() { public void listPersonnel() { if (AccessManager.canDirectAccessPersonnel() && AccessManager.canReadPersonnel()) displayWrapperPanel(new PersonnelListPanel( requestFactory)) ;  }  public void listPersonnel(String searchText) { if (AccessManager.canDirectAccessPersonnel() && AccessManager.canReadPersonnel()) displayWrapperPanel(new PersonnelListPanel( requestFactory, searchText)) ;  }  } )) ;  * Handlers for entity Utilisateur  registrations.add(eventBus.addHandler(CreateUtilisateurEvent.TYPE, new CreateUtilisateurEvent.Handler() { public void createNewUtilisateur(GwtEvent<?> closeEvent) { if (AccessManager.canCreateUtilisateur() && AccessManager.canEditUtilisateur()) { UtilisateurFormPanel utilisateurForm = new UtilisateurFormPanel( requestFactory, null) ;  utilisateurForm.setCloseEvent(closeEvent) ;  displayWrapperPanel(utilisateurForm) ;  }  }  } )) ;  registrations.add(eventBus.addHandler(ViewUtilisateurEvent.TYPE, new ViewUtilisateurEvent.Handler() { public void viewUtilisateur(String entityId, GwtEvent<?> closeEvent) { if (AccessManager.canReadUtilisateur()) { UtilisateurFormPanel utilisateurForm = new UtilisateurFormPanel( requestFactory, entityId) ;  utilisateurForm.setCloseEvent(closeEvent) ;  displayWrapperPanel(utilisateurForm) ;  }  }  } )) ;  registrations.add(eventBus.addHandler(ListUtilisateurEvent.TYPE, new ListUtilisateurEvent.Handler() { public void listUtilisateur() { if (AccessManager.canDirectAccessUtilisateur() && AccessManager.canReadUtilisateur()) displayWrapperPanel(new UtilisateurListPanel( requestFactory)) ;  }  public void listUtilisateur(String searchText) { if (AccessManager.canDirectAccessUtilisateur() && AccessManager.canReadUtilisateur()) displayWrapperPanel(new UtilisateurListPanel( requestFactory, searchText)) ;  }  } )) ;  * Handlers for entity Notification registrations.add(eventBus.addHandler(CreateNotificationEvent.TYPE, new CreateNotificationEvent.Handler() { public void createNewNotification(GwtEvent<?> closeEvent) { if (ProfileUtil.isAdmin()) { NotificationFormPanel notificationFormPanel = new NotificationFormPanel( requestFactory, null, EpicamFormTypes.get(), EpicamRenderer.get()) ;  notificationFormPanel.setCloseEvent(closeEvent) ;  displayWrapperPanel(notificationFormPanel) ;  }  }  } )) ;  registrations.add(eventBus.addHandler(ViewNotificationEvent.TYPE, new ViewNotificationEvent.Handler() { public void viewNotification(String entityId, GwtEvent<?> closeEvent) { if (ProfileUtil.isAdmin()) { NotificationFormPanel notificationFormPanel = new NotificationFormPanel( requestFactory, entityId, EpicamFormTypes .get(), EpicamRenderer.get()) ;  notificationFormPanel.setCloseEvent(closeEvent) ;  displayWrapperPanel(notificationFormPanel) ;  }  }  } )) ;  registrations.add(eventBus.addHandler(ListNotificationEvent.TYPE, new ListNotificationEvent.Handler() { public void listNotification() { if (ProfileUtil.isAdmin()) displayWrapperPanel(new NotificationListPanel( requestFactory, EpicamFormTypes.get())) ;  }  public void listNotification(String searchText) { if (ProfileUtil.isAdmin()) displayWrapperPanel(new NotificationListPanel( requestFactory, searchText, EpicamFormTypes .get())) ;  }  } )) ;  * Handlers for entity DynamicFieldTemplate registrations.add(eventBus.addHandler( CreateDynamicFieldTemplateEvent.TYPE, new CreateDynamicFieldTemplateEvent.Handler() { public void createNewDynamicFieldTemplate( GwtEvent<?> closeEvent) { if (ProfileUtil.isAdmin()) { DynamicFieldTemplateFormPanel dynamicField_TemplateFormPanel = new DynamicFieldTemplateFormPanel( requestFactory, null, EpicamFormTypes.get()) ;  dynamicField_TemplateFormPanel .setCloseEvent(closeEvent) ;  displayWrapperPanel(dynamicField_TemplateFormPanel) ;  }  }  } )) ;  registrations.add(eventBus.addHandler( ViewDynamicFieldTemplateEvent.TYPE, new ViewDynamicFieldTemplateEvent.Handler() { public void viewDynamicFieldTemplate(String entityId, GwtEvent<?> closeEvent) { if (ProfileUtil.isAdmin()) { DynamicFieldTemplateFormPanel dynamicField_TemplateFormPanel = new DynamicFieldTemplateFormPanel( requestFactory, entityId, EpicamFormTypes .get()) ;  dynamicField_TemplateFormPanel .setCloseEvent(closeEvent) ;  displayWrapperPanel(dynamicField_TemplateFormPanel) ;  }  }  } )) ;  registrations.add(eventBus.addHandler( ListDynamicFieldTemplateEvent.TYPE, new ListDynamicFieldTemplateEvent.Handler() { public void listDynamicFieldTemplate() { if (ProfileUtil.isAdmin()) displayWrapperPanel(new DynamicFieldTemplateListPanel( requestFactory, EpicamFormTypes.get())) ;  }  public void listDynamicFieldTemplate(String searchText) { if (ProfileUtil.isAdmin()) displayWrapperPanel(new DynamicFieldTemplateListPanel( requestFactory, searchText, EpicamFormTypes .get())) ;  }  } )) ;  registrations.add(eventBus.addHandler(CreateProfileEvent.TYPE, new CreateProfileEvent.Handler() { public void createNewProfile(GwtEvent<?> closeEvent) { if (ProfileUtil.isAdmin()) { ProfileFormPanel profileForm = new ProfileFormPanel( requestFactory, null, EpicamAdminUtilRenderer.get()) ;  profileForm.setCloseEvent(closeEvent) ;  displayWrapperPanel(profileForm) ;  }  }  } )) ;  registrations.add(eventBus.addHandler(ViewProfileEvent.TYPE, new ViewProfileEvent.Handler() { public void viewProfile(String entityId, GwtEvent<?> closeEvent) { if (ProfileUtil.isAdmin()) { ProfileFormPanel profileForm = new ProfileFormPanel( requestFactory, entityId, EpicamAdminUtilRenderer.get()) ;  profileForm.setCloseEvent(closeEvent) ;  displayWrapperPanel(profileForm) ;  }  }  } )) ;  registrations.add(eventBus.addHandler(ListProfileEvent.TYPE, new ListProfileEvent.Handler() { public void listProfile() { if (ProfileUtil.isAdmin()) displayWrapperPanel(new ProfileListPanel( requestFactory)) ;  }  public void listProfile(String searchText) { if (ProfileUtil.isAdmin()) displayWrapperPanel(new ProfileListPanel( requestFactory, searchText)) ;  }  } )) ;  * Handlers for entity CardEntity registrations.add(eventBus.addHandler(ViewCardEntityEvent.TYPE, new ViewCardEntityEvent.Handler() { public void viewCardEntity(String entityId, GwtEvent<?> closeEvent) { if (ProfileUtil.isAdmin()) { CardEntityFormPanel cardEntityForm = new CardEntityFormPanel( requestFactory, entityId, EpicamAdminUtilRenderer.get()) ;  cardEntityForm.setCloseEvent(closeEvent) ;  displayWrapperPanel(cardEntityForm) ;  }  }  } )) ;  registrations.add(eventBus.addHandler(ListCardEntityEvent.TYPE, new ListCardEntityEvent.Handler() { public void listCardEntity() { if (ProfileUtil.isAdmin()) displayWrapperPanel(new CardEntityListPanel( requestFactory, EpicamAdminUtilRenderer .get())) ;  }  public void listCardEntity(String searchText) { if (ProfileUtil.isAdmin()) displayWrapperPanel(new CardEntityListPanel( requestFactory, searchText, EpicamAdminUtilRenderer.get())) ;  }  } )) ;  * Handlers for entity FieldGroup registrations.add(eventBus.addHandler(ViewFieldGroupEvent.TYPE, new ViewFieldGroupEvent.Handler() { public void viewFieldGroup(String entityId, GwtEvent<?> closeEvent) { if (ProfileUtil.isAdmin()) { FieldGroupFormPanel fieldgroupForm = new FieldGroupFormPanel( requestFactory, entityId, EpicamAdminUtilRenderer.get()) ;  fieldgroupForm.setCloseEvent(closeEvent) ;  displayWrapperPanel(fieldgroupForm) ;  }  }  } )) ;  registrations.add(eventBus.addHandler(ListFieldGroupEvent.TYPE, new ListFieldGroupEvent.Handler() { public void listFieldGroup() { if (ProfileUtil.isAdmin()) displayWrapperPanel(new FieldGroupListPanel( requestFactory, EpicamAdminUtilRenderer .get())) ;  }  public void listFieldGroup(String searchText) { if (ProfileUtil.isAdmin()) displayWrapperPanel(new FieldGroupListPanel( requestFactory, searchText, EpicamAdminUtilRenderer.get())) ;  }  } )) ;  }  @Override public void onValueChange(ValueChangeEvent<String> event) { historyCount++ ;  String token = event.getValue() ;  EntityToken entityToken = TokenHelper.getToken(token) ;  if (entityToken != null) { if (entityToken.getType().equals(TokenHelper.TK_CLASSIC)) { eventBus.fireEvent(new GoHomeEvent()) ;  }  if (entityToken.getType().equals("rapport")) { if (AccessManager.canCreateRapport()) { if (entityToken.getAction().equals(TokenHelper.TK_NEW)) { eventBus.fireEvent(new CreateRapportEvent()) ;  }  }  }  if (entityToken.getType().equals("envoiSms")) { if (AccessManager.canCreateRapport()) { if (entityToken.getAction().equals(TokenHelper.TK_NEW)) { eventBus.fireEvent(new CreateEnvoiSMSEvent()) ;  }  }  }  if (entityToken.getType().equals("personnel")) { if (AccessManager.canReadPersonnel()) { if (entityToken.getAction().equals(TokenHelper.TK_VIEW)) eventBus.fireEvent(new ViewPersonnelEvent(entityToken .getId())) ;  if (entityToken.getAction().equals(TokenHelper.TK_LIST)) { if (AccessManager.canDirectAccessPersonnel()) { if (entityToken.getId() == null && !entityToken.getId().isEmpty()) eventBus.fireEvent(new ListPersonnelEvent()) ;  else eventBus.fireEvent(new ListPersonnelEvent( entityToken.getId())) ;  }  }  }  if (AccessManager.canEditPersonnel()) { if (entityToken.getAction().equals(TokenHelper.TK_NEW)) { if (AccessManager.canCreatePersonnel()) eventBus.fireEvent(new CreatePersonnelEvent()) ;  }  }  }  if (entityToken.getType().equals("utilisateur")) { if (AccessManager.canReadUtilisateur()) { if (entityToken.getAction().equals(TokenHelper.TK_VIEW)) eventBus.fireEvent(new ViewUtilisateurEvent(entityToken .getId())) ;  if (entityToken.getAction().equals(TokenHelper.TK_LIST)) { if (AccessManager.canDirectAccessUtilisateur()) { if (entityToken.getId() == null && !entityToken.getId().isEmpty()) eventBus.fireEvent(new ListUtilisateurEvent()) ;  else eventBus.fireEvent(new ListUtilisateurEvent( entityToken.getId())) ;  }  }  }  if (AccessManager.canEditUtilisateur()) { if (entityToken.getAction().equals(TokenHelper.TK_NEW)) { if (AccessManager.canCreateUtilisateur()) eventBus.fireEvent(new CreateUtilisateurEvent()) ;  }  }  }  if (entityToken.getType().equals("notification")) { if (ProfileUtil.isAdmin()) { if (entityToken.getAction().equals(TokenHelper.TK_VIEW)) eventBus.fireEvent(new ViewNotificationEvent( entityToken.getId())) ;  if (entityToken.getAction().equals(TokenHelper.TK_LIST)) { eventBus.fireEvent(new ListNotificationEvent()) ;  }  if (entityToken.getAction().equals(TokenHelper.TK_NEW)) { eventBus.fireEvent(new CreateNotificationEvent()) ;  }  }  }  if (entityToken.getType().equals("dynamicfieldtemplate")) { if (ProfileUtil.isAdmin()) { if (entityToken.getAction().equals(TokenHelper.TK_VIEW)) eventBus.fireEvent(new ViewDynamicFieldTemplateEvent( entityToken.getId())) ;  if (entityToken.getAction().equals(TokenHelper.TK_LIST)) { eventBus.fireEvent(new ListDynamicFieldTemplateEvent()) ;  }  if (entityToken.getAction().equals(TokenHelper.TK_NEW)) { eventBus.fireEvent(new CreateDynamicFieldTemplateEvent()) ;  }  }  }  if (entityToken.getType().equals("fieldgroup")) { if (ProfileUtil.isAdmin()) { if (entityToken.getAction().equals(TokenHelper.TK_VIEW)) eventBus.fireEvent(new ViewFieldGroupEvent(entityToken .getId())) ;  if (entityToken.getAction().equals(TokenHelper.TK_LIST)) { eventBus.fireEvent(new ListFieldGroupEvent()) ;  }  if (entityToken.getAction().equals(TokenHelper.TK_NEW)) { eventBus.fireEvent(new CreateFieldGroupEvent()) ;  }  }  }  if (entityToken.getType().equals("profile")) { if (ProfileUtil.isAdmin()) { if (entityToken.getAction().equals(TokenHelper.TK_VIEW)) eventBus.fireEvent(new ViewProfileEvent(entityToken .getId())) ;  if (entityToken.getAction().equals(TokenHelper.TK_LIST)) { eventBus.fireEvent(new ListProfileEvent()) ;  }  if (entityToken.getAction().equals(TokenHelper.TK_NEW)) { eventBus.fireEvent(new CreateProfileEvent()) ;  }  }  }  if (entityToken.getType().equals("cardentity")) { if (ProfileUtil.isAdmin()) { if (entityToken.getAction().equals(TokenHelper.TK_VIEW)) eventBus.fireEvent(new ViewCardEntityEvent(entityToken .getId())) ;  if (entityToken.getAction().equals(TokenHelper.TK_LIST)) { eventBus.fireEvent(new ListCardEntityEvent()) ;  }  if (entityToken.getAction().equals(TokenHelper.TK_NEW)) { eventBus.fireEvent(new CreateCardEntityEvent()) ;  }  }  }  }  else eventBus.fireEvent(new GoHomeEvent()) ;  } }