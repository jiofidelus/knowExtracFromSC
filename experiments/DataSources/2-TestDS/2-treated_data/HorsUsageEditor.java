package org.imogene.epicam.client.ui.editor ; public class HorsUsageEditor extends Composite implements Editor<HorsUsageProxy>, HasEditorDelegate<HorsUsageProxy>, HasEditorErrors<HorsUsageProxy> { interface Binder extends UiBinder<Widget, HorsUsageEditor> { }  private static final Binder BINDER = GWT.create(Binder.class) ;  protected final EpicamRequestFactory requestFactory ;  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private EditorDelegate<HorsUsageProxy> delegate ;  private HorsUsageProxy editedValue ;  //Not used by the editor private boolean hideButtons = false ;  @UiField @Ignore FieldGroupPanel descriptionSection ;  @UiField(provided = true) SortieLotEditorNestedForm lot ;  private SortieLotDataProvider lotDataProvider ;  @UiField ImogSingleEnumBox type ;  @UiField ImogTextAreaBox motif ;  * Constructor * @param factory the application request factory * @param hideButtons true if the relation field buttons shall be hidden public HorsUsageEditor(EpicamRequestFactory factory, boolean hideButtons) { this.requestFactory = factory ;  this.hideButtons = hideButtons ;  setRelationFields() ;  initWidget(BINDER.createAndBindUi(this)) ;  properties() ;  }  * Constructor * @param factory the application request factory public HorsUsageEditor(EpicamRequestFactory factory) { this(factory, false) ;  }  * Sets the properties of the fields private void properties() { descriptionSection.setGroupTitle(NLS.constants() .horsUsage_group_description()) ;  type.setLabel(NLS.constants().horsUsage_field_type()) ;  type.addItem(EpicamEnumConstants.HORSUSAGE_TYPE_PERIMEE, NLS .constants().horsUsage_type_perimee_option()) ;  type.addItem(EpicamEnumConstants.HORSUSAGE_TYPE_CASSE, NLS.constants() .horsUsage_type_casse_option()) ;  motif.setLabel(NLS.constants().horsUsage_field_motif()) ;  }  * Configures the widgets that manage relation fields private void setRelationFields() { lot = new SortieLotEditorNestedForm(requestFactory) ;  }  * Sets the edition mode * @param isEdited true to enable the edition of the form public void setEdited(boolean isEdited) { if (isEdited) setFieldEditAccess() ;  else setFieldReadAccess() ;  lot.setEdited(isEdited) ;  type.setEdited(isEdited) ;  motif.setEdited(isEdited) ;  }  * Configures the visibility of the fields  * in view mode depending on the user privileges private void setFieldReadAccess() { if (!AccessManager.canReadHorsUsageDescription()) descriptionSection.setVisible(false) ;  }  * Configures the visibility of the fields  * in edit mode depending on the user privileges private void setFieldEditAccess() { if (!AccessManager.canEditHorsUsageDescription()) descriptionSection.setVisible(false) ;  }  * Sets the Request Context for the List Editors. public void setRequestContextForListEditors(HorsUsageRequest ctx) { lot.setRequestContextForListEditors(ctx) ;  }  * Manages editor updates when a field value changes private void setFieldValueChangeHandler() { registrations.add(requestFactory.getEventBus().addHandler( FieldValueChangeEvent.TYPE, new FieldValueChangeEvent.Handler() { @Override public void onValueChange(ImogField<?> field) { // field dependent visibility management computeVisibility(field, false) ;  }  } )) ;  }  * Computes the field visibility public void computeVisibility(ImogField<?> source, boolean allValidation) { lot.computeVisibility(source, allValidation) ;  }  * Configures the handlers of the widgets that manage relation fields private void setRelationHandlers() { }  * Gets the HorsUsageProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities * @return public HorsUsageProxy getEditedValue() { return editedValue ;  }  * Sets the HorsUsageProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities  * @param editedValue  public void setEditedValue(HorsUsageProxy editedValue) { this.editedValue = editedValue ;  }  * public void raiseNotUniqueError(String field) { delegate.recordError(BaseNLS.messages().error_not_unique(), null, field) ;  }  * Validate fields values public void validateFields() { // lot nested form shall be validated lot.validateFields() ;  }  private void setAllLabelWith(String width) { type.setLabelWidth(width) ;  motif.setLabelWidth(width) ;  }  private void setAllBoxWith(int width) { type.setBoxWidth(width) ;  motif.setBoxWidth(width) ;  }  @Override public void setDelegate(EditorDelegate<HorsUsageProxy> delegate) { this.delegate = delegate ;  }  @Override public void showErrors(List<EditorError> errors) { if (errors != null && errors.size() > 0) { List<EditorError> lotFieldErrors = new ArrayList<EditorError>() ;  for (EditorError error : errors) { Object userData = error.getUserData() ;  if (userData != null && userData instanceof String) { String field = (String) userData ;  if (field.equals("lot")) lotFieldErrors.add(error) ;  }  }  if (lotFieldErrors.size() > 0) lot.showErrors(lotFieldErrors) ;  }  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override protected void onLoad() { setRelationHandlers() ;  setFieldValueChangeHandler() ;  super.onLoad() ;  } }