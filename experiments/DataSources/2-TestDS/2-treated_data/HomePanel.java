package org.imogene.epicam.client.ui.panel ; public class HomePanel extends Composite { private static int PATIENT_HLK = 0 ;  private static int EXAM_HLK = 1 ;  private static int MAP_HLK = 2 ;  private static int ACMS_HLK = 3 ;  private static int FORMATION_HLK = 4 ;  private static int STOCK_HLK = 5 ;  private static int ADMINISTRATION_HLK = 6 ;  private static int MEDICAMENTS_HLK = 7 ;  private static int RESRCHUM_HLK = 8 ;  private static int HELP_HLK = 9 ;  interface Binder extends UiBinder<Widget, HomePanel> { }  private static final Binder BINDER = GWT.create(Binder.class) ;  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private EventBus eventBus ; // @UiField// StackPanel stackPanel ;  @UiField ScrollPanel scrollPanel ;  @UiField(provided = true) FieldGroupPanel temaHelp ;  @UiField(provided = true) HTML helpMessage ;  @UiField(provided = true) FieldGroupPanel temaUsers ;  @UiField(provided = true) EntityPanel personnel ;  @UiField(provided = true) EntityPanel utilisateur ;  @UiField(provided = true) FieldGroupPanel temaAdministration ;  @UiField(provided = true) EntityPanel notification ;  @UiField(provided = true) EntityPanel dynamicField_Template ;  @UiField(provided = true) EntityPanel profile ;  @UiField(provided = true) FieldGroupPanel temaModel ;  @UiField(provided = true) EntityPanel cardEntity ;  @UiField(provided = true) EntityPanel fieldGroup ;  @UiField(provided = true) HTML homeMessage ;  *  * @param eventBus public HomePanel(EventBus eventBus) { this.eventBus = eventBus ;  homeMessage = new HTML(BaseNLS.messages().homePanel_message()) ;  helpMessage = new HTML(BaseNLS.messages().help_content()) ;  //Specific help for each component // patientHelp = new HTML(BaseNLS.messages().patient_help()) ;  // examHelp = new HTML(BaseNLS.messages().exam_help()) ;  // smsHelp = new HTML(BaseNLS.messages().sms_help()) ;  // trainingHelp = new HTML(BaseNLS.messages().training_help()) ;  // stockHelp = new HTML(BaseNLS.messages().stock_help()) ;  // adminHelp = new HTML(BaseNLS.messages().admin_help()) ;  // drugAdminHelp = new HTML(BaseNLS.messages().drug_admin_help()) ;  // reportHelp = new HTML(BaseNLS.messages().report_help()) ;  // userAdminHelp = new HTML(BaseNLS.messages().user_admin_help()) ;  temaUsers = new FieldGroupPanel() ;  temaUsers.setGroupTitle(AdminNLS.constants().thema_users()) ;  if (EpicamIconConstants.PERSONNEL_ICON != null) personnel = new EntityPanel(NLS.constants().personnel_name(), EpicamIconConstants.PERSONNEL_ICON) ;  else personnel = new EntityPanel(NLS.constants().personnel_name()) ;  if (EpicamIconConstants.UTILISATEUR_ICON != null) utilisateur = new EntityPanel(NLS.constants().utilisateur_name(), EpicamIconConstants.UTILISATEUR_ICON) ;  else utilisateur = new EntityPanel(NLS.constants().utilisateur_name()) ;  temaAdministration = new FieldGroupPanel() ;  temaAdministration.setGroupTitle(AdminNLS.constants() .thema_administration()) ;  notification = new EntityPanel( AdminNLS.constants().notification_name(), AdminIconConstants.NOTIFICATION_ICON) ;  dynamicField_Template = new EntityPanel(DynFieldsNLS.constants() .dynamicField_Template_name(), AdminIconConstants.DYNAMICFIELD_TEMPLATE_ICON) ;  profile = new EntityPanel(AdminNLS.constants().profile_name()) ;  temaModel = new FieldGroupPanel() ;  temaModel.setGroupTitle(AdminNLS.constants().thema_model()) ;  cardEntity = new EntityPanel(AdminNLS.constants().cardEntity_name()) ;  fieldGroup = new EntityPanel(AdminNLS.constants().fieldGroup_name()) ;  temaHelp = new FieldGroupPanel() ;  temaHelp.setGroupTitle(BaseNLS.messages().thema_Help()) ;  initWidget(BINDER.createAndBindUi(this)) ;  configMenus() ;  setVisibility() ;  int height = Window.getClientHeight() ;  setPanelContentHeight(height - height / 5) ;  }  * Configures the menu buttons private void configMenus() { if (AccessManager.canCreatePersonnel() && AccessManager.canEditPersonnel()) { personnel.setCreateClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { History.newItem(TokenHelper.TK_NEW + "/personnel/", true) ;  }  } ) ;  }  else personnel.setCreateClickHandler(null) ;  if (AccessManager.canDirectAccessPersonnel() && AccessManager.canReadPersonnel()) { personnel.setListClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/personnel/", true) ;  }  } ) ;  personnel.setSearchClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { String searchValue = personnel.getSearchValue() ;  if (searchValue != null && !searchValue.isEmpty()) History.newItem(TokenHelper.TK_LIST + "/personnel/" + searchValue, true) ;  }  } ) ;  }  else { personnel.setListClickHandler(null) ;  personnel.setSearchClickHandler(null) ;  }  if (AccessManager.canCreateUtilisateur() && AccessManager.canEditUtilisateur()) { utilisateur.setCreateClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { History.newItem(TokenHelper.TK_NEW + "/utilisateur/", true) ;  }  } ) ;  }  else utilisateur.setCreateClickHandler(null) ;  if (AccessManager.canDirectAccessUtilisateur() && AccessManager.canReadUtilisateur()) { utilisateur.setListClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/utilisateur/", true) ;  }  } ) ;  utilisateur.setSearchClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { String searchValue = utilisateur.getSearchValue() ;  if (searchValue != null && !searchValue.isEmpty()) History.newItem(TokenHelper.TK_LIST + "/utilisateur/" + searchValue, true) ;  }  } ) ;  }  else { utilisateur.setListClickHandler(null) ;  utilisateur.setSearchClickHandler(null) ;  }  if (ProfileUtil.isAdmin()) { notification.setCreateClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { History.newItem(TokenHelper.TK_NEW + "/notification/", true) ;  }  } ) ;  notification.setListClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/notification/", true) ;  }  } ) ;  notification.setSearchClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { String searchValue = notification.getSearchValue() ;  if (searchValue != null && !searchValue.isEmpty()) History.newItem(TokenHelper.TK_LIST + "/notification/searchValue", true) ;  }  } ) ;  }  else { notification.setCreateClickHandler(null) ;  notification.setListClickHandler(null) ;  notification.setSearchClickHandler(null) ;  }  if (ProfileUtil.isAdmin()) { dynamicField_Template.setCreateClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { History.newItem(TokenHelper.TK_NEW + "/dynamicfieldtemplate/", true) ;  }  } ) ;  dynamicField_Template.setListClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/dynamicfieldtemplate/", true) ;  }  } ) ;  dynamicField_Template.setSearchClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { String searchValue = dynamicField_Template.getSearchValue() ;  if (searchValue != null && !searchValue.isEmpty()) History.newItem(TokenHelper.TK_LIST + "/dynamicfieldtemplate/searchValue", true) ;  }  } ) ;  }  else { dynamicField_Template.setCreateClickHandler(null) ;  dynamicField_Template.setListClickHandler(null) ;  dynamicField_Template.setSearchClickHandler(null) ;  }  if (ProfileUtil.isAdmin()) { fieldGroup.setCreateClickHandler(null) ;  fieldGroup.setListClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/fieldgroup/", true) ;  }  } ) ;  fieldGroup.setSearchClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { String searchValue = fieldGroup.getSearchValue() ;  if (searchValue != null && !searchValue.isEmpty()) History.newItem(TokenHelper.TK_LIST + "/fieldgroup/searchValue", true) ;  }  } ) ;  }  else { fieldGroup.setCreateClickHandler(null) ;  fieldGroup.setListClickHandler(null) ;  fieldGroup.setSearchClickHandler(null) ;  }  if (ProfileUtil.isAdmin()) { profile.setCreateClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { History.newItem(TokenHelper.TK_NEW + "/profile/", true) ;  }  } ) ;  profile.setListClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/profile/", true) ;  }  } ) ;  profile.setSearchClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { String searchValue = profile.getSearchValue() ;  if (searchValue != null && !searchValue.isEmpty()) History.newItem(TokenHelper.TK_LIST + "/profile/searchValue", true) ;  }  } ) ;  }  else { profile.setCreateClickHandler(null) ;  profile.setListClickHandler(null) ;  profile.setSearchClickHandler(null) ;  }  if (ProfileUtil.isAdmin()) { cardEntity.setCreateClickHandler(null) ;  cardEntity.setListClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/cardentity/", true) ;  }  } ) ;  cardEntity.setSearchClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { String searchValue = cardEntity.getSearchValue() ;  if (searchValue != null && !searchValue.isEmpty()) History.newItem(TokenHelper.TK_LIST + "/cardentity/searchValue", true) ;  }  } ) ;  }  else { cardEntity.setCreateClickHandler(null) ;  cardEntity.setListClickHandler(null) ;  cardEntity.setSearchClickHandler(null) ;  }  }  * Set the menu visibility private void setVisibility() { boolean showUsersTema = false ;  if (!AccessManager.canDirectAccessPersonnel() || !AccessManager.canReadPersonnel()) personnel.setVisible(false) ;  else showUsersTema = true ;  if (!AccessManager.canDirectAccessUtilisateur() || !AccessManager.canReadUtilisateur()) utilisateur.setVisible(false) ;  else showUsersTema = true ;  if (!showUsersTema) temaUsers.setVisible(false) ;  temaAdministration.setVisible(true) ;  notification.setVisible(false) ;  dynamicField_Template.setVisible(false) ;  profile.setVisible(true) ;  cardEntity.setVisible(true) ;  fieldGroup.setVisible(true) ;  temaModel.setVisible(true) ;  }  * Sets the height of the panel that contents the entity menus * @param height public void setPanelContentHeight(int height) { scrollPanel.getElement().getStyle().clearHeight() ;  scrollPanel.getElement().getStyle() .setProperty("height", height + "px") ;  }  *  private void setWindowHandler() { registrations.add(Window.addResizeHandler(new ResizeHandler() { @Override public void onResize(ResizeEvent arg0) { int height = Window.getClientHeight() ;  setPanelContentHeight(height - height / 5) ;  }  } )) ;  }  @Override protected void onLoad() { setWindowHandler() ;  super.onLoad() ;  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  } }