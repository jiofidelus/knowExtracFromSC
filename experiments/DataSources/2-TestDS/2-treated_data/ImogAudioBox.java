package org.imogene.web.client.ui.field.binary ; public class ImogAudioBox extends Composite implements ImogUploader, ImogField<BinaryProxy>, LeafValueEditor<BinaryProxy>, HasEditorErrors<BinaryProxy>, SoundHandler { private static final Binder uiBinder = GWT.create(Binder.class) ;  interface Binder extends UiBinder<Widget, ImogAudioBox> { }  private static String PLAYER_PLAY = GWT.getModuleBaseURL() + "images/sound_play_32.png" ;  private static String PLAYER_STOP = GWT.getModuleBaseURL() + "images/sound_stop_32.png" ;  private static String PLAYER_DISABLED = GWT.getModuleBaseURL() + "images/sound_disable_32.png" ;  ImogRequestFactory requestFactory ;  private BinaryProxy thisValue ;  private boolean edited = false ;  private boolean playing = false ;  private SoundController sndController ;  private Sound sound ;  @UiField ImogErrorLabel errorLabel ;  @UiField @Ignore ImogFieldAbstract fieldBox ;  @UiField HorizontalPanel main ;  @UiField(provided = true) Image playerStatus ;  @UiField VerticalPanel infoPanel ;  @UiField Label nameLabel ;  @UiField Label sizeLabel ;  @UiField HTML downloadLink ;  @UiField VerticalPanel editPanel ;  @UiField(provided = true) ImogBinaryUploader uploader ;  public ImogAudioBox(ImogRequestFactory requestFactory) { this.requestFactory = requestFactory ;  playerStatus = new Image(PLAYER_DISABLED) ;  uploader = new ImogBinaryUploader(requestFactory) ;  initWidget(uiBinder.createAndBindUi(this)) ;  // thumbnail.setUrl(GWT.getModuleBaseURL() + "images/no_photo.png") ;  nameLabel.setText(BaseNLS.constants().binary_nofile()) ;  }  @Override public BinaryProxy getValue() { if (uploader.getEntity() != null) { thisValue = uploader.getEntity() ;  }  return thisValue ;  }  @Override public void setLabel(String label) { fieldBox.setLabel(label) ;  }   public void setLabel(String label, HorizontalAlignmentConstant alignment) { fieldBox.setLabel(label, alignment) ;  }  @Override public void setValue(BinaryProxy value) {  if(value!=null && value.getId()!=null){  playerStatus.setUrl(PLAYER_PLAY) ;  playerStatus.setStylePrimaryName("imogene-ImageLink") ;  sndController = new SoundController() ;  sound = sndController.createSound(Sound.MIME_TYPE_AUDIO_MPEG, GWT.getHostPageBaseURL()+"getbinary?mp3Id="+value.getId()) ;   sound.addEventHandler(this) ;  downloadLink.setHTML(BinaryTools.DOWNLOAD_TMPL.replace("%PARAM_ID%", value.getId())) ;  if(thisValue!=value) setBinaryMetadata(value.getId()) ;  }   thisValue = value ;  }  @Override public void setEdited(boolean editable) { if (editable) { infoPanel.setVisible(false) ;  editPanel.setVisible(true) ;  // main.remove(infoPanel) ;  // main.add(editPanel) ;  }  else { infoPanel.setVisible(true) ;  editPanel.setVisible(false) ;  // main.remove(editPanel) ;  // main.add(infoPanel) ;  }  edited = editable ;  setPlayerStatus() ;   }  @UiHandler("playerStatus") void handleClick(ClickEvent e) { if (sound != null && !playing) { sound.play() ;  playing = true ;  playerStatus.setUrl(PLAYER_STOP) ;  GWT.log("Start playing the sound", null) ;  return ;  }  if (sound != null && playing) { sound.stop() ;  playing = false ;  playerStatus.setUrl(PLAYER_PLAY) ;  GWT.log("Stop playing the sound", null) ;  return ;  }  }   @Override public void onPlaybackComplete(PlaybackCompleteEvent event) {  playing = false ;  playerStatus.setUrl(PLAYER_PLAY) ;  }  @Override public void onSoundLoadStateChange(SoundLoadStateChangeEvent event) {   }  @Override public boolean isEdited() { return edited ;  }  * Set the player status (icon and behavior) private void setPlayerStatus(){ if(edited){ playerStatus.setUrl(PLAYER_DISABLED) ;  } else{ if(thisValue!=null) playerStatus.setUrl(PLAYER_PLAY) ;  else playerStatus.setUrl(PLAYER_DISABLED) ;  }  }  @Override public boolean isUploading() { return uploader.isUploading() ;  }  * Display the binary meta-data public void setBinaryMetadata(String value) { BinaryRequest binaryRequest = requestFactory.binaryRequest() ;  Request<BinaryDescProxy> binaryDescRequest = binaryRequest.getBinaryDesc(value) ;  binaryDescRequest.fire(new Receiver<BinaryDescProxy>() { @Override public void onSuccess(BinaryDescProxy response) { nameLabel.setText(response.getName()) ;  sizeLabel.setText(BinaryTools.getSizeAsString(response .getSize())) ;  }  @Override public void onFailure(ServerFailure error) { Window.alert("Error retrieving the Binary Description") ;  super.onFailure(error) ;  }  } ) ;  }   * Defines that the field shall notify value changes * @param eventBus the event bus that will be used to fire the value change events public void notifyChanges(EventBus eventBus) { }   @Override public void showErrors(List<EditorError> errors) { errorLabel.showErrors(errors) ;  }   public void setLabelWidth(String width) { fieldBox.setLabelWidth(width) ;  } }