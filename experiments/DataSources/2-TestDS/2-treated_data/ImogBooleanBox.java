package org.imogene.web.client.ui.field ; public class ImogBooleanBox extends Composite implements ImogField<Boolean>, LeafValueEditor<Boolean>, HasEditorErrors<Boolean> { private static final Binder uiBinder = GWT.create(Binder.class) ;  interface Binder extends UiBinder<Widget, ImogBooleanBox> { }  @UiField ImogErrorLabel errorLabel ;  @UiField @Ignore ImogFieldAbstract fieldBox ;  @UiField @Ignore ImogBooleanAsRadio booleanBox ;  public ImogBooleanBox() { initWidget(uiBinder.createAndBindUi(this)) ;  }  @Override public void setLabel(String label) { fieldBox.setLabel(label) ;  }   public void setLabel(String label, HorizontalAlignmentConstant alignment) { fieldBox.setLabel(label, alignment) ;  }  @Override public boolean isEdited() { return booleanBox.isEdited() ;  }  public Boolean getValue() { return booleanBox.getValue() ;  }  public void setValue(Boolean value) { booleanBox.setValue(value) ;  }   public void setEdited(boolean enabled) { booleanBox.setEnabled(enabled) ;  }   * Defines that the field shall notify value changes * @param eventBus the event bus that will be used to fire the value change events public void notifyChanges(final EventBus eventBus) { if(eventBus!=null) { booleanBox.addValueChangeHandler(new ValueChangeHandler<Boolean>() {  @Override public void onValueChange(ValueChangeEvent<Boolean> arg0) { eventBus.fireEvent(new FieldValueChangeEvent(ImogBooleanBox.this)) ;  }  } ) ;   }  }  @Override public void showErrors(List<EditorError> errors) { errorLabel.showErrors(errors) ;  }   public void setLabelWidth(String width) { fieldBox.setLabelWidth(width) ;  }   * Sets the widget's width public void setBoxWidth(int width) { booleanBox.getElement().getStyle().setProperty("width", width + "px") ;  }  * Sets if the Boolean shall be strict  * (displays only 'yes' and 'no' options, hides the 'unknown' option) * @param isStrict true to set the Boolean Box as strict public void isStrict(boolean isStrict) { booleanBox.isStrict(isStrict) ;  }  }