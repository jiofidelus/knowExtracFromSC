package org.imogene.web.client.ui.field.relation.single.listdataprovider ; public class ImogBeanBox<T extends ImogBeanProxy> extends Composite implements ImogField<T>, LeafValueEditor<T>, HasEditorErrors<T>{ private static final Binder uiBinder = GWT.create(Binder.class) ;  @SuppressWarnings("rawtypes") interface Binder extends UiBinder<Widget, ImogBeanBox> { }   private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private boolean edited = false ;  private boolean isLocked = false ;  private boolean hideButtons = false ;   private T value ;  private ImogBeanRenderer beanRenderer ;  @UiField ImogErrorLabel errorLabel ;  @UiField @Ignore ImogFieldAbstract fieldBox ;  @UiField TextBox textBox ;  @UiField Image viewImage ;  @UiField Image clearImage ;     public ImogBeanBox(ImogBeanRenderer beanRenderer, boolean hideButtons) { this(beanRenderer) ;  this.hideButtons = hideButtons ;  }  public ImogBeanBox(ImogBeanRenderer beanRenderer) { initWidget(uiBinder.createAndBindUi(this)) ;  viewImage.setTitle(BaseNLS.constants().button_view()) ;  viewImage.setUrl(GWT.getModuleBaseURL()+ "images/relation_view.png") ;  clearImage.setTitle(BaseNLS.constants().button_remove()) ;  clearImage.setUrl(GWT.getModuleBaseURL()+ "images/relation_remove.png") ;  this.beanRenderer = beanRenderer ;  }   @Override public boolean isEdited() { return edited ;  }  public void setLocked(boolean locked) { isLocked = locked ;  }    public void setViewClickHandler(ClickHandler handler){ registrations.add(viewImage.addClickHandler(handler)) ;  }   @UiHandler("clearImage") void onRemoveEntity(ClickEvent e) { clear() ;  }    * Get the value selected * @return the value selected public T getValue(){  return value ;  }   * Get the display text of the selected value * @return the display text of the selected value public String getText(){  return textBox.getText() ;  }   * Sets the listbox selected value  * @param value the selected value  public void setValue(T value){ this.value = value ;  if(value!=null) textBox.setValue(beanRenderer.getDisplayValue(value)) ;  else textBox.setValue("") ;  setButtonVisibility() ;  }   * Sets the listbox selected value  * @param value the selected value  * @param notifyChange if true notify changes public void setValue(T value, boolean notifyChange){ setValue(value) ;  if(notifyChange) ValueChangeEvent.fire(textBox, textBox.getValue()) ;  }   *  public void setEdited(boolean enabled) {  this.edited = enabled ;  setButtonVisibility() ;  }   *  private void setButtonVisibility() {  if(edited) {  if(!isLocked) {  if(value!=null) clearImage.setVisible(true) ;  else clearImage.setVisible(false) ;  }  else { clearImage.setVisible(false) ;  }  }  else { clearImage.setVisible(false) ;  }   if(value==null || hideButtons) viewImage.setVisible(false) ;  else viewImage.setVisible(true) ;   }   * CLear the content of the MedanyListBox TextBox public void clear() { setValue(null, true) ;  }   public void hideButtons(boolean hideButtons) { this.hideButtons = hideButtons ;  setButtonVisibility() ;  }   * Sets the widget's width public void setBoxWidth(String width) { textBox.getElement().getStyle().setProperty("width", width) ;  }  @Override protected void onUnload() { for(HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override public void setLabel(String label) { fieldBox.setLabel(label) ;  }   public void setLabel(String label, HorizontalAlignmentConstant alignment) { fieldBox.setLabel(label, alignment) ;  }  * Defines that the field shall notify value changes * @param eventBus the event bus that will be used to fire the value change events public void notifyChanges(final EventBus eventBus) { if(eventBus!=null) { textBox.addValueChangeHandler(new ValueChangeHandler<String>() {  @Override public void onValueChange(ValueChangeEvent<String> arg0) { eventBus.fireEvent(new FieldValueChangeEvent(ImogBeanBox.this)) ;  }  } ) ;   }  }  @Override public void showErrors(List<EditorError> errors) { errorLabel.showErrors(errors) ;  }   public void setLabelWidth(String width) { fieldBox.setLabelWidth(width) ;  } }