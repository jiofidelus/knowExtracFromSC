package org.imogene.epicam.client.ui.editor ; public class DetailRavitaillementEditor extends Composite implements Editor<DetailRavitaillementProxy>, HasEditorDelegate<DetailRavitaillementProxy>, HasEditorErrors<DetailRavitaillementProxy> { interface Binder extends UiBinder<Widget, DetailRavitaillementEditor> { }  private static final Binder BINDER = GWT.create(Binder.class) ;  protected final EpicamRequestFactory requestFactory ;  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private EditorDelegate<DetailRavitaillementProxy> delegate ;  private DetailRavitaillementProxy editedValue ;  //Not used by the editor private boolean hideButtons = false ;  @UiField @Ignore FieldGroupPanel descriptionSection ;  @UiField(provided = true) ImogSingleRelationBox<RavitaillementProxy> ravitaillement ;  private RavitaillementDataProvider ravitaillementDataProvider ;  @UiField @Ignore FieldGroupPanel sortieSection ;  @UiField(provided = true) SortieLotEditorNestedRow sortieLot ;  private SortieLotDataProvider sortieLotDataProvider ;  @UiField @Ignore FieldGroupPanel entreeSection ;  @UiField(provided = true) EntreeLotEditorNestedRow entreeLot ;  private EntreeLotDataProvider entreeLotDataProvider ;  * Constructor * @param factory the application request factory * @param hideButtons true if the relation field buttons shall be hidden public DetailRavitaillementEditor(EpicamRequestFactory factory, boolean hideButtons) { this.requestFactory = factory ;  this.hideButtons = hideButtons ;  setRelationFields() ;  initWidget(BINDER.createAndBindUi(this)) ;  properties() ;  }  * Constructor * @param factory the application request factory public DetailRavitaillementEditor(EpicamRequestFactory factory) { this(factory, false) ;  }  * Sets the properties of the fields private void properties() { descriptionSection.setGroupTitle(NLS.constants() .detailRavitaillement_group_description()) ;  ravitaillement.setLabel(NLS.constants() .detailRavitaillement_field_ravitaillement()) ;  // hidden field ravitaillement.setVisible(false) ;  sortieSection.setGroupTitle(NLS.constants() .detailRavitaillement_group_sortie()) ;  entreeSection.setGroupTitle(NLS.constants() .detailRavitaillement_group_entree()) ;  }  * Configures the widgets that manage relation fields private void setRelationFields() { ravitaillementDataProvider = new RavitaillementDataProvider( requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden ravitaillement = new ImogSingleRelationBox<RavitaillementProxy>( ravitaillementDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreateRavitaillement() && AccessManager.canEditRavitaillement()) ravitaillement = new ImogSingleRelationBox<RavitaillementProxy>( ravitaillementDataProvider, EpicamRenderer.get()) ;  else ravitaillement = new ImogSingleRelationBox<RavitaillementProxy>( false, ravitaillementDataProvider, EpicamRenderer.get()) ;  }  sortieLot = new SortieLotEditorNestedRow(requestFactory) ;  entreeLot = new EntreeLotEditorNestedRow(requestFactory) ;  }  * Sets the edition mode * @param isEdited true to enable the edition of the form public void setEdited(boolean isEdited) { if (isEdited) setFieldEditAccess() ;  else setFieldReadAccess() ;  // readonly field ravitaillement.setEdited(false) ;  sortieLot.setEdited(isEdited) ;  entreeLot.setEdited(isEdited) ;  }  * Configures the visibility of the fields  * in view mode depending on the user privileges private void setFieldReadAccess() { if (!AccessManager.canReadDetailRavitaillementDescription()) descriptionSection.setVisible(false) ;  if (!AccessManager.canReadDetailRavitaillementSortie()) sortieSection.setVisible(false) ;  if (!AccessManager.canReadDetailRavitaillementEntree()) entreeSection.setVisible(false) ;  }  * Configures the visibility of the fields  * in edit mode depending on the user privileges private void setFieldEditAccess() { if (!AccessManager.canEditDetailRavitaillementDescription()) descriptionSection.setVisible(false) ;  if (!AccessManager.canEditDetailRavitaillementSortie()) sortieSection.setVisible(false) ;  if (!AccessManager.canEditDetailRavitaillementEntree()) entreeSection.setVisible(false) ;  }  * Sets the Request Context for the List Editors. public void setRequestContextForListEditors(DetailRavitaillementRequest ctx) { sortieLot.setRequestContextForListEditors(ctx) ;  entreeLot.setRequestContextForListEditors(ctx) ;  }  * Manages editor updates when a field value changes private void setFieldValueChangeHandler() { registrations.add(requestFactory.getEventBus().addHandler( FieldValueChangeEvent.TYPE, new FieldValueChangeEvent.Handler() { @Override public void onValueChange(ImogField<?> field) { // field dependent visibility management computeVisibility(field, false) ;  }  } )) ;  }  * Computes the field visibility public void computeVisibility(ImogField<?> source, boolean allValidation) { sortieLot.computeVisibility(source, allValidation) ;  entreeLot.computeVisibility(source, allValidation) ;  }  * Setter to inject a Ravitaillement value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setRavitaillement(RavitaillementProxy value, boolean isLocked) { ravitaillement.setLocked(isLocked) ;  ravitaillement.setValue(value) ;  }  private void clearRavitaillementWidget() { ravitaillement.clear() ;  }  * Configures the handlers of the widgets that manage relation fields private void setRelationHandlers() { ravitaillement.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (ravitaillement.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  RavitaillementFormPanel form = new RavitaillementFormPanel( requestFactory, ravitaillement.getValue().getId(), relationPopup, "ravitaillement") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  ravitaillement.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  RavitaillementFormPanel form = new RavitaillementFormPanel( requestFactory, null, relationPopup, "ravitaillement") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SaveRavitaillementEvent.TYPE, new SaveRavitaillementEvent.Handler() { @Override public void saveRavitaillement(RavitaillementProxy value) { ravitaillement.setValue(value) ;  }  @Override public void saveRavitaillement(RavitaillementProxy value, String initField) { if (initField.equals("ravitaillement")) ravitaillement.setValue(value, true) ;  }  } )) ;  }  * Gets the DetailRavitaillementProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities * @return public DetailRavitaillementProxy getEditedValue() { return editedValue ;  }  * Sets the DetailRavitaillementProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities  * @param editedValue  public void setEditedValue(DetailRavitaillementProxy editedValue) { this.editedValue = editedValue ;  }  * public void raiseNotUniqueError(String field) { delegate.recordError(BaseNLS.messages().error_not_unique(), null, field) ;  }  * Validate fields values public void validateFields() { // sortieLot nested form shall be validated sortieLot.validateFields() ;  // entreeLot nested form shall be validated entreeLot.validateFields() ;  }  private void setAllLabelWith(String width) { ravitaillement.setLabelWidth(width) ;  }  private void setAllBoxWith(int width) { ravitaillement.setBoxWidth(width) ;  }  @Override public void setDelegate(EditorDelegate<DetailRavitaillementProxy> delegate) { this.delegate = delegate ;  }  @Override public void showErrors(List<EditorError> errors) { if (errors != null && errors.size() > 0) { for (EditorError error : errors) { Object userData = error.getUserData() ;  if (userData != null && userData instanceof String) { String field = (String) userData ;  }  }  }  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override protected void onLoad() { setRelationHandlers() ;  setFieldValueChangeHandler() ;  super.onLoad() ;  } }