package org.imogene.web.client.ui.field.relation.single ; public class ImogSingleRelationBoxPopUp<T extends ImogBeanProxy> { @SuppressWarnings("rawtypes") interface Binder extends UiBinder<PopupPanel, ImogSingleRelationBoxPopUp> { Binder BINDER = GWT.create(Binder.class) ;  }  interface ImogSingleSelectionBoxGridStyle extends DataGrid.Style { String IMOG_CSS = "ImogSingleSelectionBoxGrid.css" ;  }  interface TableResources extends DataGrid.Resources { @Override @Source(value = { ImogSingleSelectionBoxGridStyle.IMOG_CSS } ) ImogSingleSelectionBoxGridStyle dataGridStyle() ;  }  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private static final int itemByPage = 10 ;  private final SingleSelectionModel<T> selectionModel = new SingleSelectionModel<T>() ;  private ImogSingleRelation<T> parentBox ;  private ImogBeanDataProvider<T> beanDataProvider ;  private ImogBeanRenderer beanRenderer ;  @UiField(provided = true) @Ignore PopupPanel popup ;  @UiField(provided = true) @Ignore DataGrid<T> table ;  @UiField(provided = true) @Ignore ImogSimplePager pager ;  @UiField @Ignore Label searchLabel ;  @UiField @Ignore TextBox valueFilter ;  @UiField @Ignore PushButton filterButton ;  public ImogSingleRelationBoxPopUp(ImogSingleRelation<T> parentBoxValue, ImogBeanDataProvider<T> provider, ImogBeanRenderer beanRenderer) { this.parentBox = parentBoxValue ;  this.beanDataProvider = provider ;  this.beanRenderer = beanRenderer ;  if (beanDataProvider != null && beanDataProvider.getSearchCriterions() != null) beanDataProvider.setSearchCriterions(null) ;  popup = new PopupPanel(true) ;  table = new DataGrid<T>(itemByPage, GWT.<TableResources> create(TableResources.class)) { @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  }  ;  pager = new ImogSimplePager() ;  pager.setDisplay(table) ;  pager.setRangeLimited(false) ;  Binder.BINDER.createAndBindUi(this) ;  Column<T, String> listColumn = new ListColumn() ;  table.addColumn(listColumn) ;  table.setSelectionModel(selectionModel) ;  registrations.add(selectionModel.addSelectionChangeHandler(new SelectionChangeEvent.Handler() { @Override public void onSelectionChange(SelectionChangeEvent event) { T value = selectionModel.getSelectedObject() ;  if (value == null) { return ;  }  parentBox.setValue(value, true) ;  hide() ;  selectionModel.setSelected(value, false) ;  }  } )) ;  table.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.DISABLED) ;  // addMouseWheelHandler() ;  searchLabel.setText(BaseNLS.constants().button_search()) ;  ImogAsyncDataProvider dataProvider = new ImogAsyncDataProvider() ;  dataProvider.addDataDisplay(table) ;  }  @UiHandler("filterButton") void onFilter(ClickEvent e) { beanDataProvider.fullTextSearch(valueFilter.getText()) ;  // pager.firstPage() ;  table.setVisibleRangeAndClearData(new Range(0, itemByPage), true) ;  }  public void show() { popup.show() ;  }  public void hide() { popup.hide() ;  }  * @author MEDES-IMPS <<<<<<< HEAD *  * ======= >>>>>>> master private class ListColumn extends Column<T, String> { public ListColumn() { super(new TextCell()) ;  }  @Override public String getValue(T object) { return beanRenderer.getDisplayValue(object) ;  }  }  * @author MEDES-IMPS private class ImogAsyncDataProvider extends AsyncDataProvider<T> { @Override protected void onRangeChanged(final HasData<T> display) { Request<Long> countRowsRequest = beanDataProvider.getTotalRowCount() ;  countRowsRequest.fire(new Receiver<Long>() { @Override public void onSuccess(Long count) { if (count != null) { updateRowCount(count.intValue(), true) ;  pager.setTotalNbOfRows(count.intValue()) ;  updateTable(display) ;  }  }  } ) ;  }  * @param display private void updateTable(final HasData<T> display) { final Range range = display.getVisibleRange() ;  final int start = range.getStart() ;  Request<List<T>> request = beanDataProvider.getList(start, itemByPage) ;  request.fire(new Receiver<List<T>>() { @Override public void onSuccess(List<T> response) { updateRowData(start, response) ;  }  } ) ;  }  } }