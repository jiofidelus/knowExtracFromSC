package org.imogene.epicam.client.ui.editor ; public class ExamenMicroscopieEditor extends Composite implements Editor<ExamenMicroscopieProxy>, HasEditorDelegate<ExamenMicroscopieProxy>, HasEditorErrors<ExamenMicroscopieProxy> { interface Binder extends UiBinder<Widget, ExamenMicroscopieEditor> { }  private static final Binder BINDER = GWT.create(Binder.class) ;  protected final EpicamRequestFactory requestFactory ;  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private EditorDelegate<ExamenMicroscopieProxy> delegate ;  private ExamenMicroscopieProxy editedValue ;  //Not used by the editor private boolean hideButtons = false ;  @UiField @Ignore FieldGroupPanel centreExamenSection ;  @UiField(provided = true) ImogSingleRelationBox<CentreDiagTraitProxy> CDT ;  private CentreDiagTraitDataProvider cDTDataProvider ;  @UiField(provided = true) ImogSingleRelationBox<LaboratoireReferenceProxy> laboratoireReference ;  private LaboratoireReferenceDataProvider laboratoireReferenceDataProvider ;  @UiField @Ignore FieldGroupPanel examenSection ;  @UiField(provided = true) ImogSingleRelationBox<CasTuberculoseProxy> casTb ;  private CasTuberculoseDataProvider casTbDataProvider ;  @UiField ImogDateBox date ;  @UiField ImogSingleEnumBox raisonDepistage ;  @UiField ImogSingleEnumBox resultat ;  @UiField ImogTextAreaBox observations ;  * Constructor * @param factory the application request factory * @param hideButtons true if the relation field buttons shall be hidden public ExamenMicroscopieEditor(EpicamRequestFactory factory, boolean hideButtons) { this.requestFactory = factory ;  this.hideButtons = hideButtons ;  setRelationFields() ;  initWidget(BINDER.createAndBindUi(this)) ;  properties() ;  }  * Constructor * @param factory the application request factory public ExamenMicroscopieEditor(EpicamRequestFactory factory) { this(factory, false) ;  }  * Sets the properties of the fields private void properties() { centreExamenSection.setGroupTitle(NLS.constants() .examenMicroscopie_group_centreExamen()) ;  CDT.setLabel(NLS.constants().examenMicroscopie_field_cDT()) ;  laboratoireReference.setLabel(NLS.constants() .examenMicroscopie_field_laboratoireReference()) ;  examenSection.setGroupTitle(NLS.constants() .examenMicroscopie_group_examen()) ;  casTb.setLabel(NLS.constants().examenMicroscopie_field_casTb()) ;  date.setLabel(NLS.constants().examenMicroscopie_field_date()) ;  raisonDepistage.setLabel(NLS.constants() .examenMicroscopie_field_raisonDepistage()) ;  raisonDepistage .addItem( EpicamEnumConstants.EXAMENMICROSCOPIE_RAISONDEPISTAGE_DIAGNOSTIC, NLS.constants() .examenMicroscopie_raisonDepistage_diagnostic_option()) ;  raisonDepistage.addItem( EpicamEnumConstants.EXAMENMICROSCOPIE_RAISONDEPISTAGE_SUIVI, NLS.constants() .examenMicroscopie_raisonDepistage_suivi_option()) ;  resultat.setLabel(NLS.constants().examenMicroscopie_field_resultat()) ;  resultat.addItem( EpicamEnumConstants.EXAMENMICROSCOPIE_RESULTAT_NEGATIF, NLS .constants() .examenMicroscopie_resultat_negatif_option()) ;  resultat.addItem(EpicamEnumConstants.EXAMENMICROSCOPIE_RESULTAT_RARE, NLS.constants().examenMicroscopie_resultat_rare_option()) ;  resultat.addItem(EpicamEnumConstants.EXAMENMICROSCOPIE_RESULTAT_UNPLUS, NLS.constants().examenMicroscopie_resultat_unPlus_option()) ;  resultat.addItem( EpicamEnumConstants.EXAMENMICROSCOPIE_RESULTAT_DEUXPLUS, NLS .constants() .examenMicroscopie_resultat_deuxPlus_option()) ;  resultat.addItem( EpicamEnumConstants.EXAMENMICROSCOPIE_RESULTAT_TROISPLUS, NLS .constants() .examenMicroscopie_resultat_troisPlus_option()) ;  observations.setLabel(NLS.constants() .examenMicroscopie_field_observations()) ;  }  * Configures the widgets that manage relation fields private void setRelationFields() { cDTDataProvider = new CentreDiagTraitDataProvider(requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden CDT = new ImogSingleRelationBox<CentreDiagTraitProxy>( cDTDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreateCentreDiagTrait() && AccessManager.canEditCentreDiagTrait()) CDT = new ImogSingleRelationBox<CentreDiagTraitProxy>( cDTDataProvider, EpicamRenderer.get()) ;  else CDT = new ImogSingleRelationBox<CentreDiagTraitProxy>(false, cDTDataProvider, EpicamRenderer.get()) ;  }  laboratoireReferenceDataProvider = new LaboratoireReferenceDataProvider( requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden laboratoireReference = new ImogSingleRelationBox<LaboratoireReferenceProxy>( laboratoireReferenceDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreateLaboratoireReference() && AccessManager.canEditLaboratoireReference()) laboratoireReference = new ImogSingleRelationBox<LaboratoireReferenceProxy>( laboratoireReferenceDataProvider, EpicamRenderer.get()) ;  else laboratoireReference = new ImogSingleRelationBox<LaboratoireReferenceProxy>( false, laboratoireReferenceDataProvider, EpicamRenderer.get()) ;  }  casTbDataProvider = new CasTuberculoseDataProvider(requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden casTb = new ImogSingleRelationBox<CasTuberculoseProxy>( casTbDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreateCasTuberculose() && AccessManager.canEditCasTuberculose()) casTb = new ImogSingleRelationBox<CasTuberculoseProxy>( casTbDataProvider, EpicamRenderer.get()) ;  else casTb = new ImogSingleRelationBox<CasTuberculoseProxy>(false, casTbDataProvider, EpicamRenderer.get()) ;  }  }  * Sets the edition mode * @param isEdited true to enable the edition of the form public void setEdited(boolean isEdited) { if (isEdited) setFieldEditAccess() ;  else setFieldReadAccess() ;  CDT.setEdited(isEdited) ;  laboratoireReference.setEdited(isEdited) ;  casTb.setEdited(isEdited) ;  date.setEdited(isEdited) ;  raisonDepistage.setEdited(isEdited) ;  resultat.setEdited(isEdited) ;  observations.setEdited(isEdited) ;  }  * Configures the visibility of the fields  * in view mode depending on the user privileges private void setFieldReadAccess() { if (!AccessManager.canReadExamenMicroscopieCentreExamen()) centreExamenSection.setVisible(false) ;  if (!AccessManager.canReadExamenMicroscopieExamen()) examenSection.setVisible(false) ;  }  * Configures the visibility of the fields  * in edit mode depending on the user privileges private void setFieldEditAccess() { if (!AccessManager.canEditExamenMicroscopieCentreExamen()) centreExamenSection.setVisible(false) ;  if (!AccessManager.canEditExamenMicroscopieExamen()) examenSection.setVisible(false) ;  }  * Sets the Request Context for the List Editors. public void setRequestContextForListEditors(ExamenMicroscopieRequest ctx) { }  * Manages editor updates when a field value changes private void setFieldValueChangeHandler() { registrations.add(requestFactory.getEventBus().addHandler( FieldValueChangeEvent.TYPE, new FieldValueChangeEvent.Handler() { @Override public void onValueChange(ImogField<?> field) { // field dependent visibility management computeVisibility(field, false) ;  }  } )) ;  }  * Computes the field visibility public void computeVisibility(ImogField<?> source, boolean allValidation) { }  * Setter to inject a CentreDiagTrait value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setCDT(CentreDiagTraitProxy value, boolean isLocked) { CDT.setLocked(isLocked) ;  CDT.setValue(value) ;  }  private void clearCDTWidget() { CDT.clear() ;  }  * Setter to inject a LaboratoireReference value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setLaboratoireReference(LaboratoireReferenceProxy value, boolean isLocked) { laboratoireReference.setLocked(isLocked) ;  laboratoireReference.setValue(value) ;  }  private void clearLaboratoireReferenceWidget() { laboratoireReference.clear() ;  }  * Setter to inject a CasTuberculose value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setCasTb(CasTuberculoseProxy value, boolean isLocked) { casTb.setLocked(isLocked) ;  casTb.setValue(value) ;  }  private void clearCasTbWidget() { casTb.clear() ;  }  * Configures the handlers of the widgets that manage relation fields private void setRelationHandlers() { CDT.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (CDT.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  CentreDiagTraitFormPanel form = new CentreDiagTraitFormPanel( requestFactory, CDT.getValue().getId(), relationPopup, "CDT") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  CDT.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  CentreDiagTraitFormPanel form = new CentreDiagTraitFormPanel( requestFactory, null, relationPopup, "CDT") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SaveCentreDiagTraitEvent.TYPE, new SaveCentreDiagTraitEvent.Handler() { @Override public void saveCentreDiagTrait(CentreDiagTraitProxy value) { CDT.setValue(value) ;  }  @Override public void saveCentreDiagTrait(CentreDiagTraitProxy value, String initField) { if (initField.equals("CDT")) CDT.setValue(value, true) ;  }  } )) ;  laboratoireReference.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (laboratoireReference.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  LaboratoireReferenceFormPanel form = new LaboratoireReferenceFormPanel( requestFactory, laboratoireReference.getValue() .getId(), relationPopup, "laboratoireReference") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  laboratoireReference.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  LaboratoireReferenceFormPanel form = new LaboratoireReferenceFormPanel( requestFactory, null, relationPopup, "laboratoireReference") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SaveLaboratoireReferenceEvent.TYPE, new SaveLaboratoireReferenceEvent.Handler() { @Override public void saveLaboratoireReference( LaboratoireReferenceProxy value) { laboratoireReference.setValue(value) ;  }  @Override public void saveLaboratoireReference( LaboratoireReferenceProxy value, String initField) { if (initField.equals("laboratoireReference")) laboratoireReference.setValue(value, true) ;  }  } )) ;  casTb.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (casTb.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  CasTuberculoseFormPanel form = new CasTuberculoseFormPanel( requestFactory, casTb.getValue().getId(), relationPopup, "casTb") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  casTb.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  CasTuberculoseFormPanel form = new CasTuberculoseFormPanel( requestFactory, null, relationPopup, "casTb") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SaveCasTuberculoseEvent.TYPE, new SaveCasTuberculoseEvent.Handler() { @Override public void saveCasTuberculose(CasTuberculoseProxy value) { casTb.setValue(value) ;  }  @Override public void saveCasTuberculose(CasTuberculoseProxy value, String initField) { if (initField.equals("casTb")) casTb.setValue(value, true) ;  }  } )) ;  }  * Gets the ExamenMicroscopieProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities * @return public ExamenMicroscopieProxy getEditedValue() { return editedValue ;  }  * Sets the ExamenMicroscopieProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities  * @param editedValue  public void setEditedValue(ExamenMicroscopieProxy editedValue) { this.editedValue = editedValue ;  }  * public void raiseNotUniqueError(String field) { delegate.recordError(BaseNLS.messages().error_not_unique(), null, field) ;  }  * Validate fields values public void validateFields() { // casTb is a required field if (casTb.getValue() == null) delegate.recordError(BaseNLS.messages().error_required(), null, "casTb") ;  // date is a required field if (date.getValueWithoutParseException() == null && date.isValid()) delegate.recordError(BaseNLS.messages().error_required(), null, "date") ;  // raisonDepistage is a required field if (raisonDepistage.getValue() == null) delegate.recordError(BaseNLS.messages().error_required(), null, "raisonDepistage") ;  // resultat is a required field if (resultat.getValue() == null) delegate.recordError(BaseNLS.messages().error_required(), null, "resultat") ;  }  private void setAllLabelWith(String width) { CDT.setLabelWidth(width) ;  laboratoireReference.setLabelWidth(width) ;  casTb.setLabelWidth(width) ;  date.setLabelWidth(width) ;  raisonDepistage.setLabelWidth(width) ;  resultat.setLabelWidth(width) ;  observations.setLabelWidth(width) ;  }  private void setAllBoxWith(int width) { CDT.setBoxWidth(width) ;  laboratoireReference.setBoxWidth(width) ;  casTb.setBoxWidth(width) ;  raisonDepistage.setBoxWidth(width) ;  resultat.setBoxWidth(width) ;  observations.setBoxWidth(width) ;  }  @Override public void setDelegate(EditorDelegate<ExamenMicroscopieProxy> delegate) { this.delegate = delegate ;  }  @Override public void showErrors(List<EditorError> errors) { if (errors != null && errors.size() > 0) { List<EditorError> casTbFieldErrors = new ArrayList<EditorError>() ;  List<EditorError> dateFieldErrors = new ArrayList<EditorError>() ;  List<EditorError> raisonDepistageFieldErrors = new ArrayList<EditorError>() ;  List<EditorError> resultatFieldErrors = new ArrayList<EditorError>() ;  for (EditorError error : errors) { Object userData = error.getUserData() ;  if (userData != null && userData instanceof String) { String field = (String) userData ;  if (field.equals("casTb")) casTbFieldErrors.add(error) ;  if (field.equals("date")) dateFieldErrors.add(error) ;  if (field.equals("raisonDepistage")) raisonDepistageFieldErrors.add(error) ;  if (field.equals("resultat")) resultatFieldErrors.add(error) ;  }  }  if (casTbFieldErrors.size() > 0) casTb.showErrors(casTbFieldErrors) ;  if (dateFieldErrors.size() > 0) date.showErrors(dateFieldErrors) ;  if (raisonDepistageFieldErrors.size() > 0) raisonDepistage.showErrors(raisonDepistageFieldErrors) ;  if (resultatFieldErrors.size() > 0) resultat.showErrors(resultatFieldErrors) ;  }  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override protected void onLoad() { setRelationHandlers() ;  setFieldValueChangeHandler() ;  super.onLoad() ;  } }