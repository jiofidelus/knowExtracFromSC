package org.imogene.epicam.client.ui.editor ; public class CasTuberculoseEditor extends Composite implements Editor<CasTuberculoseProxy>, HasEditorDelegate<CasTuberculoseProxy>, HasEditorErrors<CasTuberculoseProxy> { interface Binder extends UiBinder<Widget, CasTuberculoseEditor> { }  private static final Binder BINDER = GWT.create(Binder.class) ;  protected final EpicamRequestFactory requestFactory ;  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private EditorDelegate<CasTuberculoseProxy> delegate ;  private CasTuberculoseProxy editedValue ;  //Not used by the editor private boolean hideButtons = false ;  @UiField @Ignore FieldGroupPanel informationsSection ;  @UiField ImogTextBox identifiant ;  @UiField ImogTextBox numRegTB ;  @UiField(provided = true) ImogSingleRelationBox<PatientProxy> patient ;  private PatientDataProvider patientDataProvider ;  @UiField ImogDateBox dateDebutTraitement ;  @UiField ImogSingleEnumBox typePatient ;  @UiField ImogTextAreaBox typePatientPrecisions ;  @UiField ImogSingleEnumBox formeMaladie ;  @UiField ImogTextAreaBox extraPulmonairePrecisions ;  @UiField ImogSingleEnumBox cotrimoxazole ;  @UiField ImogBooleanBox antiRetroViraux ;  @UiField ImogBooleanBox fumeur ;  @UiField ImogBooleanBox fumeurArreter ;  @UiField @Ignore FieldGroupPanel examenSection ;  @UiField(provided = true) ImogMultiRelationBox<ExamenMicroscopieProxy> examensMiscrocopies ;  private ExamenMicroscopieDataProvider examensMiscrocopiesDataProvider ;  @UiField(provided = true) ImogMultiRelationBox<ExamenATBProxy> examensATB ;  private ExamenATBDataProvider examensATBDataProvider ;  @UiField @Ignore FieldGroupPanel traitementSection ;  @UiField(provided = true) ImogSingleRelationBox<RegimeProxy> regimePhaseInitiale ;  private RegimeDataProvider regimePhaseInitialeDataProvider ;  @UiField(provided = true) ImogSingleRelationBox<RegimeProxy> regimePhaseContinuation ;  private RegimeDataProvider regimePhaseContinuationDataProvider ;  @UiField(provided = true) CasTuberculosePriseMedicamenteusePhaseInitialeListEditor priseMedicamenteusePhaseInitiale ;  private PriseMedicamenteuseDataProvider priseMedicamenteusePhaseInitialeDataProvider ;  @UiField(provided = true) CasTuberculosePriseMedicamenteusePhaseContinuationListEditor priseMedicamenteusePhaseContinuation ;  private PriseMedicamenteuseDataProvider priseMedicamenteusePhaseContinuationDataProvider ;  @UiField(provided = true) CasTuberculoseRendezVousListEditor rendezVous ;  private RendezVousDataProvider rendezVousDataProvider ;  @UiField @Ignore FieldGroupPanel finTraitementSection ;  @UiField ImogDateBox dateFinTraitement ;  @UiField ImogSingleEnumBox devenirMalade ;  @UiField ImogTextAreaBox observation ;  * Constructor * @param factory the application request factory * @param hideButtons true if the relation field buttons shall be hidden public CasTuberculoseEditor(EpicamRequestFactory factory, boolean hideButtons) { this.requestFactory = factory ;  this.hideButtons = hideButtons ;  setRelationFields() ;  initWidget(BINDER.createAndBindUi(this)) ;  properties() ;  }  * Constructor * @param factory the application request factory public CasTuberculoseEditor(EpicamRequestFactory factory) { this(factory, false) ;  }  * Sets the properties of the fields private void properties() { informationsSection.setGroupTitle(NLS.constants() .casTuberculose_group_informations()) ;  identifiant .setLabel(NLS.constants().casTuberculose_field_identifiant()) ;  numRegTB.setLabel(NLS.constants().casTuberculose_field_numRegTB()) ;  patient.setLabel(NLS.constants().casTuberculose_field_patient()) ;  dateDebutTraitement.setLabel(NLS.constants() .casTuberculose_field_dateDebutTraitement()) ;  typePatient .setLabel(NLS.constants().casTuberculose_field_typePatient()) ;  typePatient.addItem( EpicamEnumConstants.CASTUBERCULOSE_TYPEPATIENT_NOUVEAUCAS, NLS .constants() .casTuberculose_typePatient_nouveauCas_option()) ;  typePatient .addItem( EpicamEnumConstants.CASTUBERCULOSE_TYPEPATIENT_REPRISEAPRESABANDON, NLS.constants() .casTuberculose_typePatient_repriseApresAbandon_option()) ;  typePatient.addItem( EpicamEnumConstants.CASTUBERCULOSE_TYPEPATIENT_ECHEC, NLS .constants().casTuberculose_typePatient_echec_option()) ;  typePatient.addItem( EpicamEnumConstants.CASTUBERCULOSE_TYPEPATIENT_RECHUTE, NLS .constants() .casTuberculose_typePatient_rechute_option()) ;  typePatient.addItem( EpicamEnumConstants.CASTUBERCULOSE_TYPEPATIENT_AUTRE, NLS .constants().casTuberculose_typePatient_autre_option()) ;  // the value of typePatient affects the visibility of other fields typePatient.notifyChanges(requestFactory.getEventBus()) ;  typePatientPrecisions.setLabel(NLS.constants() .casTuberculose_field_typePatientPrecisions()) ;  // the visibility of typePatientPrecisions depends on the value of other fields typePatientPrecisions.addStyleName("dependentVisibility") ;  formeMaladie.setLabel(NLS.constants() .casTuberculose_field_formeMaladie()) ;  formeMaladie.addItem( EpicamEnumConstants.CASTUBERCULOSE_FORMEMALADIE_TPMPLUS, NLS .constants() .casTuberculose_formeMaladie_tPMPlus_option()) ;  formeMaladie.addItem( EpicamEnumConstants.CASTUBERCULOSE_FORMEMALADIE_TPMMOINS, NLS .constants() .casTuberculose_formeMaladie_tPMMoins_option()) ;  formeMaladie .addItem( EpicamEnumConstants.CASTUBERCULOSE_FORMEMALADIE_EXTRA_PULMONAIRE, NLS.constants() .casTuberculose_formeMaladie_extra_Pulmonaire_option()) ;  // the value of formeMaladie affects the visibility of other fields formeMaladie.notifyChanges(requestFactory.getEventBus()) ;  extraPulmonairePrecisions.setLabel(NLS.constants() .casTuberculose_field_extraPulmonairePrecisions()) ;  // the visibility of extraPulmonairePrecisions depends on the value of other fields extraPulmonairePrecisions.addStyleName("dependentVisibility") ;  cotrimoxazole.setLabel(NLS.constants() .casTuberculose_field_cotrimoxazole()) ;  cotrimoxazole.addItem( EpicamEnumConstants.CASTUBERCULOSE_COTRIMOXAZOLE_NON, NLS .constants().casTuberculose_cotrimoxazole_non_option()) ;  cotrimoxazole .addItem( EpicamEnumConstants.CASTUBERCULOSE_COTRIMOXAZOLE_COTRIMOXAZOLE_960, NLS.constants() .casTuberculose_cotrimoxazole_cotrimoxazole_960_option()) ;  cotrimoxazole .addItem( EpicamEnumConstants.CASTUBERCULOSE_COTRIMOXAZOLE_COTRIMOXAZOLE_480, NLS.constants() .casTuberculose_cotrimoxazole_cotrimoxazole_480_option()) ;  antiRetroViraux.setLabel(NLS.constants() .casTuberculose_field_antiRetroViraux()) ;  fumeur.setLabel(NLS.constants().casTuberculose_field_fumeur()) ;  // the value of fumeur affects the visibility of other fields fumeur.notifyChanges(requestFactory.getEventBus()) ;  fumeurArreter.setLabel(NLS.constants() .casTuberculose_field_fumeurArreter()) ;  // the visibility of fumeurArreter depends on the value of other fields fumeurArreter.addStyleName("dependentVisibility") ;  examenSection.setGroupTitle(NLS.constants() .casTuberculose_group_examen()) ;  examensMiscrocopies.setLabel(NLS.constants() .casTuberculose_field_examensMiscrocopies()) ;  examensATB.setLabel(NLS.constants().casTuberculose_field_examensATB()) ;  traitementSection.setGroupTitle(NLS.constants() .casTuberculose_group_traitement()) ;  regimePhaseInitiale.setLabel(NLS.constants() .casTuberculose_field_regimePhaseInitiale()) ;  regimePhaseContinuation.setLabel(NLS.constants() .casTuberculose_field_regimePhaseContinuation()) ;  finTraitementSection.setGroupTitle(NLS.constants() .casTuberculose_group_finTraitement()) ;  dateFinTraitement.setLabel(NLS.constants() .casTuberculose_field_dateFinTraitement()) ;  devenirMalade.setLabel(NLS.constants() .casTuberculose_field_devenirMalade()) ;  devenirMalade.addItem( EpicamEnumConstants.CASTUBERCULOSE_DEVENIRMALADE_GUERRIS, NLS .constants() .casTuberculose_devenirMalade_guerris_option()) ;  devenirMalade.addItem( EpicamEnumConstants.CASTUBERCULOSE_DEVENIRMALADE_TERMINE, NLS .constants() .casTuberculose_devenirMalade_termine_option()) ;  devenirMalade.addItem( EpicamEnumConstants.CASTUBERCULOSE_DEVENIRMALADE_ECHEC, NLS .constants() .casTuberculose_devenirMalade_echec_option()) ;  devenirMalade.addItem( EpicamEnumConstants.CASTUBERCULOSE_DEVENIRMALADE_DECEDE, NLS .constants() .casTuberculose_devenirMalade_decede_option()) ;  devenirMalade.addItem( EpicamEnumConstants.CASTUBERCULOSE_DEVENIRMALADE_PERDUDEVUE, NLS.constants() .casTuberculose_devenirMalade_perduDeVue_option()) ;  devenirMalade .addItem( EpicamEnumConstants.CASTUBERCULOSE_DEVENIRMALADE_ARRETPRESCRIPTEUR, NLS.constants() .casTuberculose_devenirMalade_arretPrescripteur_option()) ;  devenirMalade .addItem( EpicamEnumConstants.CASTUBERCULOSE_DEVENIRMALADE_ARRETEFFETSINDESI, NLS.constants() .casTuberculose_devenirMalade_arretEffetsIndesi_option()) ;  devenirMalade .addItem( EpicamEnumConstants.CASTUBERCULOSE_DEVENIRMALADE_ARRETSURVENUTB, NLS.constants() .casTuberculose_devenirMalade_arretSurvenuTB_option()) ;  observation .setLabel(NLS.constants().casTuberculose_field_observation()) ;  }  * Configures the widgets that manage relation fields private void setRelationFields() { patientDataProvider = new PatientDataProvider(requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden patient = new ImogSingleRelationBox<PatientProxy>( patientDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreatePatient() && AccessManager.canEditPatient()) patient = new ImogSingleRelationBox<PatientProxy>( patientDataProvider, EpicamRenderer.get()) ;  else patient = new ImogSingleRelationBox<PatientProxy>(false, patientDataProvider, EpicamRenderer.get()) ;  }  examensMiscrocopiesDataProvider = new ExamenMicroscopieDataProvider( requestFactory, "casTb") ;  if (hideButtons) // in popup, relation buttons hidden  examensMiscrocopies = new ImogMultiRelationBox<ExamenMicroscopieProxy>( examensMiscrocopiesDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled if (AccessManager.canCreateExamenMicroscopie() && AccessManager.canEditExamenMicroscopie()) examensMiscrocopies = new ImogMultiRelationBox<ExamenMicroscopieProxy>( examensMiscrocopiesDataProvider, EpicamRenderer.get(), null) ;  else examensMiscrocopies = new ImogMultiRelationBox<ExamenMicroscopieProxy>( false, examensMiscrocopiesDataProvider, EpicamRenderer.get(), null) ;  }  examensMiscrocopies.setPopUpTitle(NLS.constants() .examenMicroscopie_select_title()) ;  examensMiscrocopies.setFilterPanel(new ExamenMicroscopieFilterPanel()) ;  examensATBDataProvider = new ExamenATBDataProvider(requestFactory, "casTb") ;  if (hideButtons) // in popup, relation buttons hidden  examensATB = new ImogMultiRelationBox<ExamenATBProxy>( examensATBDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled if (AccessManager.canCreateExamenATB() && AccessManager.canEditExamenATB()) examensATB = new ImogMultiRelationBox<ExamenATBProxy>( examensATBDataProvider, EpicamRenderer.get(), null) ;  else examensATB = new ImogMultiRelationBox<ExamenATBProxy>(false, examensATBDataProvider, EpicamRenderer.get(), null) ;  }  examensATB.setPopUpTitle(NLS.constants().examenATB_select_title()) ;  examensATB.setFilterPanel(new ExamenATBFilterPanel()) ;  regimePhaseInitialeDataProvider = new RegimeDataProvider(requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden regimePhaseInitiale = new ImogSingleRelationBox<RegimeProxy>( regimePhaseInitialeDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreateRegime() && AccessManager.canEditRegime()) regimePhaseInitiale = new ImogSingleRelationBox<RegimeProxy>( regimePhaseInitialeDataProvider, EpicamRenderer.get()) ;  else regimePhaseInitiale = new ImogSingleRelationBox<RegimeProxy>( false, regimePhaseInitialeDataProvider, EpicamRenderer.get()) ;  }  regimePhaseContinuationDataProvider = new RegimeDataProvider( requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden regimePhaseContinuation = new ImogSingleRelationBox<RegimeProxy>( regimePhaseContinuationDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreateRegime() && AccessManager.canEditRegime()) regimePhaseContinuation = new ImogSingleRelationBox<RegimeProxy>( regimePhaseContinuationDataProvider, EpicamRenderer.get()) ;  else regimePhaseContinuation = new ImogSingleRelationBox<RegimeProxy>( false, regimePhaseContinuationDataProvider, EpicamRenderer.get()) ;  }  priseMedicamenteusePhaseInitiale = new CasTuberculosePriseMedicamenteusePhaseInitialeListEditor( requestFactory) ;  priseMedicamenteusePhaseContinuation = new CasTuberculosePriseMedicamenteusePhaseContinuationListEditor( requestFactory) ;  rendezVous = new CasTuberculoseRendezVousListEditor(requestFactory) ;  }  * Sets the edition mode * @param isEdited true to enable the edition of the form public void setEdited(boolean isEdited) { if (isEdited) setFieldEditAccess() ;  else setFieldReadAccess() ;  // readonly field identifiant.setEdited(false) ;  numRegTB.setEdited(isEdited) ;  patient.setEdited(isEdited) ;  dateDebutTraitement.setEdited(isEdited) ;  typePatient.setEdited(isEdited) ;  typePatientPrecisions.setEdited(isEdited) ;  formeMaladie.setEdited(isEdited) ;  extraPulmonairePrecisions.setEdited(isEdited) ;  cotrimoxazole.setEdited(isEdited) ;  antiRetroViraux.setEdited(isEdited) ;  fumeur.setEdited(isEdited) ;  fumeurArreter.setEdited(isEdited) ;  examensMiscrocopies.setEdited(isEdited) ;  examensATB.setEdited(isEdited) ;  regimePhaseInitiale.setEdited(isEdited) ;  regimePhaseContinuation.setEdited(isEdited) ;  priseMedicamenteusePhaseInitiale.setEdited(isEdited) ;  priseMedicamenteusePhaseContinuation.setEdited(isEdited) ;  rendezVous.setEdited(isEdited) ;  dateFinTraitement.setEdited(isEdited) ;  devenirMalade.setEdited(isEdited) ;  observation.setEdited(isEdited) ;  }  * Configures the visibility of the fields  * in view mode depending on the user privileges private void setFieldReadAccess() { if (!AccessManager.canReadCasTuberculoseInformations()) informationsSection.setVisible(false) ;  if (!AccessManager.canReadCasTuberculoseExamen()) examenSection.setVisible(false) ;  if (!AccessManager.canReadCasTuberculoseTraitement()) traitementSection.setVisible(false) ;  if (!AccessManager.canReadCasTuberculoseFinTraitement()) finTraitementSection.setVisible(false) ;  }  * Configures the visibility of the fields  * in edit mode depending on the user privileges private void setFieldEditAccess() { if (!AccessManager.canEditCasTuberculoseInformations()) informationsSection.setVisible(false) ;  if (!AccessManager.canEditCasTuberculoseExamen()) examenSection.setVisible(false) ;  if (!AccessManager.canEditCasTuberculoseTraitement()) traitementSection.setVisible(false) ;  if (!AccessManager.canEditCasTuberculoseFinTraitement()) finTraitementSection.setVisible(false) ;  }  * Sets the Request Context for the List Editors. public void setRequestContextForListEditors(CasTuberculoseRequest ctx) { priseMedicamenteusePhaseInitiale.setRequestContextForListEditors(ctx) ;  priseMedicamenteusePhaseContinuation .setRequestContextForListEditors(ctx) ;  rendezVous.setRequestContextForListEditors(ctx) ;  }  * Manages editor updates when a field value changes private void setFieldValueChangeHandler() { registrations.add(requestFactory.getEventBus().addHandler( FieldValueChangeEvent.TYPE, new FieldValueChangeEvent.Handler() { @Override public void onValueChange(ImogField<?> field) { // field dependent visibility management computeVisibility(field, false) ;  //Test if patient is selected and build tb case id by patient id if (field.equals(patient)) { if (patient != null) { //+nombre d'�pisode de tb du patient +1 com.google.web.bindery.requestfactory.shared.Request<List<CasTuberculoseProxy>> listCasTB = requestFactory .casTuberculoseRequest() .listCasTuberculose("modified", false) ;  listCasTB .fire(new Receiver<List<CasTuberculoseProxy>>() { @Override public void onSuccess( List<CasTuberculoseProxy> response) { int nbEpisodeTB = 0 ;  String identifiantTB = patient .getValue() .getIdentifiant() ;  for (CasTuberculoseProxy casTuberculoseProxy : response) { if (casTuberculoseProxy .getPatient() .getIdentifiant() .equals(patient .getValue() .getIdentifiant())) { nbEpisodeTB++ ;  }  }  identifiant.setValue(patient .getValue() .getIdentifiant() + "_" + nbEpisodeTB) ;  }  } ) ;  }  }  }  } )) ;  }  * Computes the field visibility public void computeVisibility(ImogField<?> source, boolean allValidation) { priseMedicamenteusePhaseInitiale.computeVisibility(source, allValidation) ;  priseMedicamenteusePhaseContinuation.computeVisibility(source, allValidation) ;  rendezVous.computeVisibility(source, allValidation) ;  // the visibility of field typePatientPrecisions depends on the value of other fields if (allValidation || source.equals(typePatient)) { if ((typePatient.getValue() != null && typePatient.getValue() .matches("3"))) { typePatientPrecisions.setVisible(true) ;  }  else { typePatientPrecisions.setVisible(false) ;  }  }  // the visibility of field extraPulmonairePrecisions depends on the value of other fields if (allValidation || source.equals(formeMaladie)) { if ((formeMaladie.getValue() != null && formeMaladie.getValue() .matches("2"))) { extraPulmonairePrecisions.setVisible(true) ;  }  else { extraPulmonairePrecisions.setVisible(false) ;  }  }  // the visibility of field fumeurArreter depends on the value of other fields if (allValidation || source.equals(fumeur)) { if ((fumeur.getValue() != null && fumeur.getValue())) { fumeurArreter.setVisible(true) ;  }  else { fumeurArreter.setVisible(false) ;  }  }  }  * Setter to inject a Patient value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setPatient(PatientProxy value, boolean isLocked) { patient.setLocked(isLocked) ;  patient.setValue(value) ;  }  private void clearPatientWidget() { patient.clear() ;  }  private void clearExamensMiscrocopiesWidget() { examensMiscrocopies.emptyList() ;  }  private void clearExamensATBWidget() { examensATB.emptyList() ;  }  * Setter to inject a Regime value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setRegimePhaseInitiale(RegimeProxy value, boolean isLocked) { regimePhaseInitiale.setLocked(isLocked) ;  regimePhaseInitiale.setValue(value) ;  }  private void clearRegimePhaseInitialeWidget() { regimePhaseInitiale.clear() ;  }  * Setter to inject a Regime value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setRegimePhaseContinuation(RegimeProxy value, boolean isLocked) { regimePhaseContinuation.setLocked(isLocked) ;  regimePhaseContinuation.setValue(value) ;  }  private void clearRegimePhaseContinuationWidget() { regimePhaseContinuation.clear() ;  }  * Configures the handlers of the widgets that manage relation fields private void setRelationHandlers() { patient.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (patient.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  PatientFormPanel form = new PatientFormPanel( requestFactory, patient.getValue().getId(), relationPopup, "patient") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  patient.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  PatientFormPanel form = new PatientFormPanel(requestFactory, null, relationPopup, "patient") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SavePatientEvent.TYPE, new SavePatientEvent.Handler() { @Override public void savePatient(PatientProxy value) { patient.setValue(value) ;  }  @Override public void savePatient(PatientProxy value, String initField) { if (initField.equals("patient")) patient.setValue(value, true) ;  }  } )) ;  examensMiscrocopies.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (!examensMiscrocopies.isEmpty() && examensMiscrocopies.getSelectedEntities().size() > 0) { ExamenMicroscopieProxy value = examensMiscrocopies .getSelectedEntities().get(0) ;  RelationPopupPanel relationPopup = new RelationPopupPanel() ;  ExamenMicroscopieFormPanel form = new ExamenMicroscopieFormPanel( requestFactory, value.getId(), relationPopup, "examensMiscrocopies") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  examensMiscrocopies.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  ExamenMicroscopieFormPanel form = new ExamenMicroscopieFormPanel( requestFactory, null, relationPopup, "examensMiscrocopies") ;  form.setCasTb(editedValue, true) ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SaveExamenMicroscopieEvent.TYPE, new SaveExamenMicroscopieEvent.Handler() { @Override public void saveExamenMicroscopie( ExamenMicroscopieProxy value) { if (!examensMiscrocopies.isPresent(value)) examensMiscrocopies.addValue(value) ;  }  public void saveExamenMicroscopie( ExamenMicroscopieProxy value, String initField) { if (initField.equals("examensMiscrocopies")) { if (examensMiscrocopies.isPresent(value)) examensMiscrocopies.replaceValue(value) ;  else examensMiscrocopies.addValue(value, true) ;  }  }  } )) ;  examensATB.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (!examensATB.isEmpty() && examensATB.getSelectedEntities().size() > 0) { ExamenATBProxy value = examensATB.getSelectedEntities() .get(0) ;  RelationPopupPanel relationPopup = new RelationPopupPanel() ;  ExamenATBFormPanel form = new ExamenATBFormPanel( requestFactory, value.getId(), relationPopup, "examensATB") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  examensATB.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  ExamenATBFormPanel form = new ExamenATBFormPanel( requestFactory, null, relationPopup, "examensATB") ;  form.setCasTb(editedValue, true) ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SaveExamenATBEvent.TYPE, new SaveExamenATBEvent.Handler() { @Override public void saveExamenATB(ExamenATBProxy value) { if (!examensATB.isPresent(value)) examensATB.addValue(value) ;  }  public void saveExamenATB(ExamenATBProxy value, String initField) { if (initField.equals("examensATB")) { if (examensATB.isPresent(value)) examensATB.replaceValue(value) ;  else examensATB.addValue(value, true) ;  }  }  } )) ;  regimePhaseInitiale.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (regimePhaseInitiale.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  RegimeFormPanel form = new RegimeFormPanel(requestFactory, regimePhaseInitiale.getValue().getId(), relationPopup, "regimePhaseInitiale") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  regimePhaseInitiale.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  RegimeFormPanel form = new RegimeFormPanel(requestFactory, null, relationPopup, "regimePhaseInitiale") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SaveRegimeEvent.TYPE, new SaveRegimeEvent.Handler() { @Override public void saveRegime(RegimeProxy value) { regimePhaseInitiale.setValue(value) ;  }  @Override public void saveRegime(RegimeProxy value, String initField) { if (initField.equals("regimePhaseInitiale")) regimePhaseInitiale.setValue(value, true) ;  }  } )) ;  regimePhaseContinuation.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (regimePhaseContinuation.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  RegimeFormPanel form = new RegimeFormPanel(requestFactory, regimePhaseContinuation.getValue().getId(), relationPopup, "regimePhaseContinuation") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  regimePhaseContinuation.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  RegimeFormPanel form = new RegimeFormPanel(requestFactory, null, relationPopup, "regimePhaseContinuation") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SaveRegimeEvent.TYPE, new SaveRegimeEvent.Handler() { @Override public void saveRegime(RegimeProxy value) { regimePhaseContinuation.setValue(value) ;  }  @Override public void saveRegime(RegimeProxy value, String initField) { if (initField.equals("regimePhaseContinuation")) regimePhaseContinuation.setValue(value, true) ;  }  } )) ;  }  * Gets the CasTuberculoseProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities * @return public CasTuberculoseProxy getEditedValue() { return editedValue ;  }  * Sets the CasTuberculoseProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities  * @param editedValue  public void setEditedValue(CasTuberculoseProxy editedValue) { this.editedValue = editedValue ;  }  * public void raiseNotUniqueError(String field) { delegate.recordError(BaseNLS.messages().error_not_unique(), null, field) ;  }  * Validate fields values public void validateFields() { // dateDebutTraitement is a required field if (dateDebutTraitement.getValueWithoutParseException() == null && dateDebutTraitement.isValid()) delegate.recordError(BaseNLS.messages().error_required(), null, "dateDebutTraitement") ;  // priseMedicamenteusePhaseInitiale nested form shall be validated priseMedicamenteusePhaseInitiale.validateFields() ;  // priseMedicamenteusePhaseContinuation nested form shall be validated priseMedicamenteusePhaseContinuation.validateFields() ;  // rendezVous nested form shall be validated rendezVous.validateFields() ;  }  private void setAllLabelWith(String width) { identifiant.setLabelWidth(width) ;  numRegTB.setLabelWidth(width) ;  patient.setLabelWidth(width) ;  dateDebutTraitement.setLabelWidth(width) ;  typePatient.setLabelWidth(width) ;  typePatientPrecisions.setLabelWidth(width) ;  formeMaladie.setLabelWidth(width) ;  extraPulmonairePrecisions.setLabelWidth(width) ;  cotrimoxazole.setLabelWidth(width) ;  antiRetroViraux.setLabelWidth(width) ;  fumeur.setLabelWidth(width) ;  fumeurArreter.setLabelWidth(width) ;  examensMiscrocopies.setLabelWidth(width) ;  examensATB.setLabelWidth(width) ;  regimePhaseInitiale.setLabelWidth(width) ;  regimePhaseContinuation.setLabelWidth(width) ;  dateFinTraitement.setLabelWidth(width) ;  devenirMalade.setLabelWidth(width) ;  observation.setLabelWidth(width) ;  }  private void setAllBoxWith(int width) { identifiant.setBoxWidth(width) ;  numRegTB.setBoxWidth(width) ;  patient.setBoxWidth(width) ;  typePatient.setBoxWidth(width) ;  typePatientPrecisions.setBoxWidth(width) ;  formeMaladie.setBoxWidth(width) ;  extraPulmonairePrecisions.setBoxWidth(width) ;  cotrimoxazole.setBoxWidth(width) ;  examensMiscrocopies.setBoxWidth(width) ;  examensATB.setBoxWidth(width) ;  regimePhaseInitiale.setBoxWidth(width) ;  regimePhaseContinuation.setBoxWidth(width) ;  devenirMalade.setBoxWidth(width) ;  observation.setBoxWidth(width) ;  }  @Override public void setDelegate(EditorDelegate<CasTuberculoseProxy> delegate) { this.delegate = delegate ;  }  @Override public void showErrors(List<EditorError> errors) { if (errors != null && errors.size() > 0) { List<EditorError> dateDebutTraitementFieldErrors = new ArrayList<EditorError>() ;  for (EditorError error : errors) { Object userData = error.getUserData() ;  if (userData != null && userData instanceof String) { String field = (String) userData ;  if (field.equals("dateDebutTraitement")) dateDebutTraitementFieldErrors.add(error) ;  }  }  if (dateDebutTraitementFieldErrors.size() > 0) dateDebutTraitement.showErrors(dateDebutTraitementFieldErrors) ;  }  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override protected void onLoad() { setRelationHandlers() ;  setFieldValueChangeHandler() ;  super.onLoad() ;  } }