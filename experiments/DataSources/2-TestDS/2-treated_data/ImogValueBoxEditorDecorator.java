package org.imogene.web.client.ui.field.error ; public class ImogValueBoxEditorDecorator<T> extends Composite implements HasEditorErrors<T>, IsEditor<ValueBoxEditor<T>> { interface Binder extends UiBinder<Widget, ImogValueBoxEditorDecorator<?>> { Binder BINDER = GWT.create(Binder.class) ;  }  @UiField SimplePanel contents ;  @UiField ImogErrorLabel errorLabel ;  private ValueBoxEditor<T> editor ;  * Constructs a ValueBoxEditorDecorator. @UiConstructor public ImogValueBoxEditorDecorator() { initWidget(Binder.BINDER.createAndBindUi(this)) ;  }  * Constructs a ValueBoxEditorDecorator using a {@link ValueBoxBase} widget * and a {@link ValueBoxEditor} editor. *  * @param widget * the widget * @param editor * the editor public ImogValueBoxEditorDecorator(ValueBoxBase<T> widget, ValueBoxEditor<T> editor) { this() ;  contents.add(widget) ;  this.editor = editor ;  }  * Returns the associated {@link ValueBoxEditor}. *  * @return a {@link ValueBoxEditor} instance * @see #setEditor(ValueBoxEditor) public ValueBoxEditor<T> asEditor() { return editor ;  }  * Sets the associated {@link ValueBoxEditor}. *  * @param editor * a {@link ValueBoxEditor} instance * @see #asEditor() public void setEditor(ValueBoxEditor<T> editor) { this.editor = editor ;  }  * Set the widget that the EditorPanel will display. This method will * automatically call {@link #setEditor}. *  * @param widget * a {@link ValueBoxBase} widget @UiChild(limit = 1, tagname = "valuebox") public void setValueBox(ValueBoxBase<T> widget) { contents.add(widget) ;  setEditor(widget.asEditor()) ;  }  * The default implementation will display, but not consume, received errors * whose {@link EditorError#getEditor() getEditor()} method returns the * Editor passed into {@link #setEditor}. *  * @param errors * a List of {@link EditorError} instances public void showErrors(List<EditorError> errors) { errorLabel.showErrors(errors) ;  } }