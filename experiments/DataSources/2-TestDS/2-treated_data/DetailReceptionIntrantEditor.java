package org.imogene.epicam.client.ui.editor ; public class DetailReceptionIntrantEditor extends Composite implements Editor<DetailReceptionIntrantProxy>, HasEditorDelegate<DetailReceptionIntrantProxy>, HasEditorErrors<DetailReceptionIntrantProxy> { interface Binder extends UiBinder<Widget, DetailReceptionIntrantEditor> { }  private static final Binder BINDER = GWT.create(Binder.class) ;  protected final EpicamRequestFactory requestFactory ;  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private EditorDelegate<DetailReceptionIntrantProxy> delegate ;  private DetailReceptionIntrantProxy editedValue ;  //Not used by the editor private boolean hideButtons = false ;  @UiField @Ignore FieldGroupPanel descriptionSection ;  @UiField(provided = true) ImogSingleRelationBox<ReceptionProxy> reception ;  private ReceptionDataProvider receptionDataProvider ;  @UiField(provided = true) ImogSingleRelationBox<CommandeProxy> commande ;  private CommandeDataProvider commandeDataProvider ;  @UiField(provided = true) ImogSingleRelationBox<DetailCommandeIntrantProxy> detailCommande ;  private DetailCommandeIntrantDataProvider detailCommandeDataProvider ;  @UiField(provided = true) EntreeLotEditorNestedRow entreeLot ;  private EntreeLotDataProvider entreeLotDataProvider ;  * Constructor * @param factory the application request factory * @param hideButtons true if the relation field buttons shall be hidden public DetailReceptionIntrantEditor(EpicamRequestFactory factory, boolean hideButtons) { this.requestFactory = factory ;  this.hideButtons = hideButtons ;  setRelationFields() ;  initWidget(BINDER.createAndBindUi(this)) ;  properties() ;  }  * Constructor * @param factory the application request factory public DetailReceptionIntrantEditor(EpicamRequestFactory factory) { this(factory, false) ;  }  * Sets the properties of the fields private void properties() { descriptionSection.setGroupTitle(NLS.constants() .detailReceptionIntrant_group_description()) ;  reception.setLabel(NLS.constants() .detailReceptionIntrant_field_reception()) ;  // hidden field reception.setVisible(false) ;  commande.setLabel(NLS.constants() .detailReceptionIntrant_field_commande()) ;  // the value of commande affects the value of other fields commande.notifyChanges(requestFactory.getEventBus()) ;  // hidden field commande.setVisible(false) ;  detailCommande.setLabel(NLS.constants() .detailReceptionIntrant_field_detailCommande()) ;  }  * Configures the widgets that manage relation fields private void setRelationFields() { receptionDataProvider = new ReceptionDataProvider(requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden reception = new ImogSingleRelationBox<ReceptionProxy>( receptionDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreateReception() && AccessManager.canEditReception()) reception = new ImogSingleRelationBox<ReceptionProxy>( receptionDataProvider, EpicamRenderer.get()) ;  else reception = new ImogSingleRelationBox<ReceptionProxy>(false, receptionDataProvider, EpicamRenderer.get()) ;  }  commandeDataProvider = new CommandeDataProvider(requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden commande = new ImogSingleRelationBox<CommandeProxy>( commandeDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreateCommande() && AccessManager.canEditCommande()) commande = new ImogSingleRelationBox<CommandeProxy>( commandeDataProvider, EpicamRenderer.get()) ;  else commande = new ImogSingleRelationBox<CommandeProxy>(false, commandeDataProvider, EpicamRenderer.get()) ;  }  detailCommandeDataProvider = new DetailCommandeIntrantDataProvider( requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden detailCommande = new ImogSingleRelationBox<DetailCommandeIntrantProxy>( detailCommandeDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreateDetailCommandeIntrant() && AccessManager.canEditDetailCommandeIntrant()) detailCommande = new ImogSingleRelationBox<DetailCommandeIntrantProxy>( detailCommandeDataProvider, EpicamRenderer.get()) ;  else detailCommande = new ImogSingleRelationBox<DetailCommandeIntrantProxy>( false, detailCommandeDataProvider, EpicamRenderer.get()) ;  }  entreeLot = new EntreeLotEditorNestedRow(requestFactory) ;  }  * Sets the edition mode * @param isEdited true to enable the edition of the form public void setEdited(boolean isEdited) { if (isEdited) setFieldEditAccess() ;  else setFieldReadAccess() ;  // readonly field reception.setEdited(false) ;  commande.setEdited(isEdited) ;  detailCommande.setEdited(isEdited) ;  entreeLot.setEdited(isEdited) ;  }  * Configures the visibility of the fields  * in view mode depending on the user privileges private void setFieldReadAccess() { if (!AccessManager.canReadDetailReceptionIntrantDescription()) descriptionSection.setVisible(false) ;  }  * Configures the visibility of the fields  * in edit mode depending on the user privileges private void setFieldEditAccess() { if (!AccessManager.canEditDetailReceptionIntrantDescription()) descriptionSection.setVisible(false) ;  }  * Sets the Request Context for the List Editors. public void setRequestContextForListEditors( DetailReceptionIntrantRequest ctx) { entreeLot.setRequestContextForListEditors(ctx) ;  }  * Manages editor updates when a field value changes private void setFieldValueChangeHandler() { registrations.add(requestFactory.getEventBus().addHandler( FieldValueChangeEvent.TYPE, new FieldValueChangeEvent.Handler() { @Override public void onValueChange(ImogField<?> field) { // field dependent visibility management computeVisibility(field, false) ;  if (field.equals(commande)) { clearDetailCommandeWidget() ;  getDetailCommandeFilteredByCommande(commande .getValue()) ;  }  }  } )) ;  }  * Computes the field visibility public void computeVisibility(ImogField<?> source, boolean allValidation) { entreeLot.computeVisibility(source, allValidation) ;  }  * Filters the content of the RelationField DetailCommande by the value of  * the RelationField Commande * @param commande the value of  * the RelationField Commande  public void getDetailCommandeFilteredByCommande(CommandeProxy pCommande) { if (pCommande != null) { if (!hideButtons) detailCommande.hideButtons(false) ;  detailCommandeDataProvider.setFilterCriteria(pCommande.getId(), "commande.id") ;  }  else { detailCommande.hideButtons(true) ;  detailCommandeDataProvider.setFilterCriteria(null) ;  }  }  * Setter to inject a Reception value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setReception(ReceptionProxy value, boolean isLocked) { reception.setLocked(isLocked) ;  reception.setValue(value) ;  }  private void clearReceptionWidget() { reception.clear() ;  }  * Setter to inject a Commande value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setCommande(CommandeProxy value, boolean isLocked) { commande.setLocked(isLocked) ;  commande.setValue(value) ;  // Field DetailCommande depends on the value of field commande clearDetailCommandeWidget() ;  getDetailCommandeFilteredByCommande(value) ;  }  private void clearCommandeWidget() { commande.clear() ;  }  * Setter to inject a DetailCommandeIntrant value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setDetailCommande(DetailCommandeIntrantProxy value, boolean isLocked) { detailCommande.setLocked(isLocked) ;  detailCommande.setValue(value) ;  }  private void clearDetailCommandeWidget() { detailCommande.clear() ;  }  * Configures the handlers of the widgets that manage relation fields private void setRelationHandlers() { reception.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (reception.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  ReceptionFormPanel form = new ReceptionFormPanel( requestFactory, reception.getValue().getId(), relationPopup, "reception") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  reception.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  ReceptionFormPanel form = new ReceptionFormPanel( requestFactory, null, relationPopup, "reception") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SaveReceptionEvent.TYPE, new SaveReceptionEvent.Handler() { @Override public void saveReception(ReceptionProxy value) { reception.setValue(value) ;  }  @Override public void saveReception(ReceptionProxy value, String initField) { if (initField.equals("reception")) reception.setValue(value, true) ;  }  } )) ;  commande.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (commande.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  CommandeFormPanel form = new CommandeFormPanel( requestFactory, commande.getValue().getId(), relationPopup, "commande") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  commande.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  CommandeFormPanel form = new CommandeFormPanel(requestFactory, null, relationPopup, "commande") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SaveCommandeEvent.TYPE, new SaveCommandeEvent.Handler() { @Override public void saveCommande(CommandeProxy value) { commande.setValue(value) ;  }  @Override public void saveCommande(CommandeProxy value, String initField) { if (initField.equals("commande")) commande.setValue(value, true) ;  }  } )) ;  detailCommande.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (detailCommande.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  DetailCommandeIntrantFormPanel form = new DetailCommandeIntrantFormPanel( requestFactory, detailCommande.getValue().getId(), relationPopup, "detailCommande") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  detailCommande.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  DetailCommandeIntrantFormPanel form = new DetailCommandeIntrantFormPanel( requestFactory, null, relationPopup, "detailCommande") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SaveDetailCommandeIntrantEvent.TYPE, new SaveDetailCommandeIntrantEvent.Handler() { @Override public void saveDetailCommandeIntrant( DetailCommandeIntrantProxy value) { detailCommande.setValue(value) ;  }  @Override public void saveDetailCommandeIntrant( DetailCommandeIntrantProxy value, String initField) { if (initField.equals("detailCommande")) detailCommande.setValue(value, true) ;  }  } )) ;  }  * Gets the DetailReceptionIntrantProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities * @return public DetailReceptionIntrantProxy getEditedValue() { return editedValue ;  }  * Sets the DetailReceptionIntrantProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities  * @param editedValue  public void setEditedValue(DetailReceptionIntrantProxy editedValue) { this.editedValue = editedValue ;  }  * public void raiseNotUniqueError(String field) { delegate.recordError(BaseNLS.messages().error_not_unique(), null, field) ;  }  * Validate fields values public void validateFields() { // commande is a required field if (commande.getValue() == null) delegate.recordError(BaseNLS.messages().error_required(), null, "commande") ;  // detailCommande is a required field if (detailCommande.getValue() == null) delegate.recordError(BaseNLS.messages().error_required(), null, "detailCommande") ;  // entreeLot nested form shall be validated entreeLot.validateFields() ;  }  private void setAllLabelWith(String width) { reception.setLabelWidth(width) ;  commande.setLabelWidth(width) ;  detailCommande.setLabelWidth(width) ;  }  private void setAllBoxWith(int width) { reception.setBoxWidth(width) ;  commande.setBoxWidth(width) ;  detailCommande.setBoxWidth(width) ;  }  @Override public void setDelegate(EditorDelegate<DetailReceptionIntrantProxy> delegate) { this.delegate = delegate ;  }  @Override public void showErrors(List<EditorError> errors) { if (errors != null && errors.size() > 0) { List<EditorError> commandeFieldErrors = new ArrayList<EditorError>() ;  List<EditorError> detailCommandeFieldErrors = new ArrayList<EditorError>() ;  for (EditorError error : errors) { Object userData = error.getUserData() ;  if (userData != null && userData instanceof String) { String field = (String) userData ;  if (field.equals("commande")) commandeFieldErrors.add(error) ;  if (field.equals("detailCommande")) detailCommandeFieldErrors.add(error) ;  }  }  if (commandeFieldErrors.size() > 0) commande.showErrors(commandeFieldErrors) ;  if (detailCommandeFieldErrors.size() > 0) detailCommande.showErrors(detailCommandeFieldErrors) ;  }  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override protected void onLoad() { setRelationHandlers() ;  setFieldValueChangeHandler() ;  super.onLoad() ;  } }