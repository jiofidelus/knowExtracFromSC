package org.imogene.web.client.ui.field ; public class ImogGeoBox extends Composite implements ImogField<GeoFieldProxy>, LeafValueEditor<GeoFieldProxy>, HasEditorErrors<GeoFieldProxy> { private static final Binder uiBinder = GWT.create(Binder.class) ;  interface Binder extends UiBinder<Widget, ImogGeoBox> { }  private boolean edited = false ;  private boolean clickable = true ;  private AddressFieldBehavior thisBehavior ;  private GeoFieldProxy value ;  @UiField @Ignore ImogFieldAbstract fieldBox ;  @UiField ImogErrorLabel errorLabel ;  @UiField @Ignore Label labelLong ;  @UiField @Ignore ImogDblBox textBoxLong ;  @UiField @Ignore Label labelLat ;  @UiField @Ignore ImogDblBox textBoxLat ;  @UiField @Ignore Image viewOnMap ;  public ImogGeoBox() { this(null) ;  }  public ImogGeoBox(AddressFieldBehavior behavior) { initWidget(uiBinder.createAndBindUi(this)) ;   labelLong.setText(BaseNLS.constants().gps_longiture()) ;  labelLat.setText(BaseNLS.constants().gps_latitude()) ;  textBoxLong.getElement().getStyle().setProperty("width", "110px") ;  textBoxLat.getElement().getStyle().setProperty("width", "110px") ;  if (behavior == null) { thisBehavior = new DefaultAddressBehavior() ;  }  else { thisBehavior = behavior ;  }  viewOnMap.setUrl(GWT.getModuleBaseURL() + "/images/view_on_map-24.png") ;  }  public void setEdited(boolean enabled) { textBoxLong.setEnabled(enabled) ;  textBoxLat.setEnabled(enabled) ;  if (!enabled) { textBoxLong.addStyleDependentName("disabled") ;  textBoxLat.addStyleDependentName("disabled") ;  viewOnMap.addStyleDependentName("clickable") ;  }  else { textBoxLong.removeStyleDependentName("disabled") ;  textBoxLat.removeStyleDependentName("disabled") ;  viewOnMap.removeStyleDependentName("clickable") ;  }  edited = enabled ;  clickable = !enabled ;  }  @Override public void setLabel(String label) { fieldBox.setLabel(label) ;  }   public void setLabel(String label, HorizontalAlignmentConstant alignment) { fieldBox.setLabel(label, alignment) ;  }  @Override public boolean isEdited() { return edited ;  }  @UiHandler("viewOnMap") void handleClick(ClickEvent e) { if (clickable && getValue()!=null) thisBehavior.addressAction(textBoxLong.getText()+ " ; " + textBoxLat.getText()) ;  }  @Override public void setValue(GeoFieldProxy value) { this.value = value ;  if(value!=null && value.getLongitude()!=null && value.getLatitude()!=null) { textBoxLong.setValue(value.getLongitude()) ;  textBoxLat.setValue(value.getLatitude()) ;  }   }  @Override public GeoFieldProxy getValue() { if (textBoxLong.getValue()==null || textBoxLat.getValue()==null) { if(value!=null) { value.setLongitude(null) ;  value.setLatitude(null) ;  }  }  else { if(value!=null) { value.setLongitude(textBoxLong.getValue()) ;  value.setLatitude(textBoxLat.getValue()) ;   }  }   if(isNull()) return null ;  else return value ;   }   * Tells if the box value is null * @return private boolean isNull() { if(value!=null) { if(value.getLongitude()==null && value.getLatitude()==null)  return true ;  else return false ;  }  else return true ;  }   * Defines that the field shall notify value changes * @param eventBus the event bus that will be used to fire the value change events public void notifyChanges(final EventBus eventBus) { if(eventBus!=null) { textBoxLong.addValueChangeHandler(new ValueChangeHandler<Double>() {  @Override public void onValueChange(ValueChangeEvent<Double> arg0) { eventBus.fireEvent(new FieldValueChangeEvent(ImogGeoBox.this)) ;  }  } ) ;   textBoxLat.addValueChangeHandler(new ValueChangeHandler<Double>() {  @Override public void onValueChange(ValueChangeEvent<Double> arg0) { eventBus.fireEvent(new FieldValueChangeEvent(ImogGeoBox.this)) ;  }  } ) ;   }  }  @Override public void showErrors(List<EditorError> errors) { errorLabel.showErrors(errors) ;  }   public void setLabelWidth(String width) { fieldBox.setLabelWidth(width) ;  }   * Sets the widget's width public void setBoxWidth(int width) { textBoxLong.getElement().getStyle().setProperty("width", width + "px") ;  textBoxLat.getElement().getStyle().setProperty("width", width + "px") ;  }  * Interface which describes the behavior of the widget when the user * chooses to open this address. public interface AddressFieldBehavior { public void addressAction(String address) ;  }  * Behavior that enables to display the address location on the Google maps * web site. *  * @author Medes-IMPS public static class DefaultAddressBehavior implements AddressFieldBehavior { private final static String GMAPS_TMPL = "http://maps.google.com/maps?f=q&hl=en&geocode=&q=63116&ie=UTF8&ll=%LONGITUDE%,%LATITUDE%&spn=0.002391,0.005879&t=k&z=18" ;    @Override public void addressAction(String point) { if(point!=null){ String[] ll = point.split(" ; ") ;  if(ll.length>1){ Window.open(GMAPS_TMPL.replace("%LONGITUDE%", ll[0]).replace("%LATITUDE%", ll[1]), "Google maps", "") ;  }   }   }  } }