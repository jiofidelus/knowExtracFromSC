package org.imogene.admin.shared.request ; @Service(value = NotificationHandler.class, locator = SpringServiceLocator.class)public interface NotificationRequest extends RequestContext { Request<NotificationProxy> findById(String id) ;  Request<Void> save(NotificationProxy c, boolean isNew) ;  Request<List<NotificationProxy>> listNotification(int first, int max, String sortProperty, boolean sortOrder) ;  Request<List<NotificationProxy>> listNotification(int first, int max, String sortProperty, boolean sortOrder, ImogJunctionProxy criterions) ;  Request<List<NotificationProxy>> listNotification(int first, int max, String sortProperty, boolean sortOrder, List<BasicCriteriaProxy> criterions) ;  Request<List<NotificationProxy>> listNonAffectedNotification(int i, int j, String sortProperty, boolean sortOrder, String property) ;  Request<List<NotificationProxy>> listNonAffectedNotification(int i, int j, String sortProperty, boolean sortOrder, ImogJunctionProxy criterions, String property) ;  Request<List<NotificationProxy>> listNonAffectedNotificationReverse(int i, int j, String sortProperty, boolean sortOrder, String property) ;  Request<List<NotificationProxy>> listNonAffectedNotificationReverse(int i, int j, String sortProperty, boolean sortOrder, ImogJunctionProxy criterions, String property) ;  Request<List<NotificationProxy>> getNotificationEmptyList() ;  Request<Long> countNotification() ;  Request<Long> countNotification(ImogJunctionProxy criterions) ;  Request<Long> countNonAffectedNotification(String property) ;  Request<Long> countNonAffectedNotification(String property, ImogJunctionProxy criterions) ;  Request<Long> countNonAffectedNotificationReverse(String property) ;  Request<Long> countNonAffectedNotificationReverse(String property, ImogJunctionProxy criterions) ;  Request<Void> delete(Set<NotificationProxy> entities) ;  Request<Void> delete(NotificationProxy entity) ; }