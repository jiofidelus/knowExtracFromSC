package org.imogene.web.client.ui.field ; public class ImogCheckBox extends Composite implements ImogField<Boolean>, LeafValueEditor<Boolean>, HasEditorErrors<Boolean> { private static final Binder uiBinder = GWT.create(Binder.class) ;  interface Binder extends UiBinder<Widget, ImogCheckBox> { }  @UiField ImogErrorLabel errorLabel ;  @UiField @Ignore ImogFieldAbstract fieldBox ;  @UiField @Ignore ImogBooleanAsCheckBox checkBox ;  public ImogCheckBox() { initWidget(uiBinder.createAndBindUi(this)) ;  }  @Override public void setLabel(String label) { fieldBox.setLabel(label) ;  }  public void setLabel(String label, HorizontalAlignmentConstant alignment) { fieldBox.setLabel(label, alignment) ;  }  @Override public boolean isEdited() { return checkBox.isEdited() ;  }  public Boolean getValue() { return checkBox.getValue() ;  }  public void setValue(Boolean value) { checkBox.setValue(value) ;  }  public void setEdited(boolean enabled) { checkBox.setEnabled(enabled) ;  }  * Defines that the field shall notify value changes *  * @param eventBus the event bus that will be used to fire the value change events public void notifyChanges(final EventBus eventBus) { if (eventBus != null) { checkBox.addValueChangeHandler(new ValueChangeHandler<Boolean>() { @Override public void onValueChange(ValueChangeEvent<Boolean> arg0) { eventBus.fireEvent(new FieldValueChangeEvent(ImogCheckBox.this)) ;  }  } ) ;  }  }  @Override public void showErrors(List<EditorError> errors) { errorLabel.showErrors(errors) ;  }  public void setLabelWidth(String width) { fieldBox.setLabelWidth(width) ;  }  * Sets the widget's width public void setBoxWidth(int width) { checkBox.getElement().getStyle().setProperty("width", width + "px") ;  } }