package org.imogene.epicam.client.ui.editor.nested ; public class CasIndexEditorNestedRow extends Composite implements Editor<CasIndexProxy>, HasEditorDelegate<CasIndexProxy>, HasEditorErrors<CasIndexProxy> { interface Binder extends UiBinder<Widget, CasIndexEditorNestedRow> { }  private static final Binder BINDER = GWT.create(Binder.class) ;  protected final EpicamRequestFactory requestFactory ;  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private EditorDelegate<CasIndexProxy> delegate ;  private boolean hideButtons = false ;  private int index = 0 ;  private boolean isNewProxy = false ;  @UiField Image clearImage ;  @UiField(provided = true) ImogSingleRelationBox<PatientProxy> patientLie ;  private PatientDataProvider patientLieDataProvider ;  @UiField ImogTextBox typeRelation ;  * Constructor * @param factory the application request factory * @param hideButtons true if the relation field buttons shall be hidden public CasIndexEditorNestedRow(EpicamRequestFactory factory, boolean hideButtons) { this.requestFactory = factory ;  this.hideButtons = hideButtons ;  setRelationFields() ;  initWidget(BINDER.createAndBindUi(this)) ;  clearImage.setTitle(BaseNLS.constants().button_remove()) ;  clearImage .setUrl(GWT.getModuleBaseURL() + "images/relation_remove.png") ;  properties() ;  }  * Constructor * @param factory the application request factory public CasIndexEditorNestedRow(EpicamRequestFactory factory) { this(factory, false) ;  }  * Sets the properties of the fields public void properties() { //patientLie.setLabel(NLS.constants().casIndex_field_patientLie(), HasHorizontalAlignment.ALIGN_RIGHT) ;  patientLie.setLabelWidth("0px") ;  //typeRelation.setLabel(NLS.constants().casIndex_field_typeRelation(), HasHorizontalAlignment.ALIGN_RIGHT) ;  typeRelation.setLabelWidth("0px") ;  }  * Configures the widgets that manage relation fields public void setRelationFields() { patientLieDataProvider = new PatientDataProvider(requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden patientLie = new ImogSingleRelationBox<PatientProxy>( patientLieDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreatePatient() && AccessManager.canEditPatient()) patientLie = new ImogSingleRelationBox<PatientProxy>( patientLieDataProvider, EpicamRenderer.get()) ;  else patientLie = new ImogSingleRelationBox<PatientProxy>(false, patientLieDataProvider, EpicamRenderer.get()) ;  }  }  * Sets the edition mode * @param isEdited true to enable the edition of the form public void setEdited(boolean isEdited) { clearImage.setVisible(isEdited) ;  if (isEdited) setFieldEditAccess() ;  else setFieldReadAccess() ;  patientLie.setEdited(isEdited) ;  typeRelation.setEdited(isEdited) ;  }  * Configures the visibility of the fields  * in view mode depending on the user privileges public void setFieldReadAccess() { if (!AccessManager.canReadCasIndexDescription()) patientLie.setVisible(false) ;  if (!AccessManager.canReadCasIndexDescription()) typeRelation.setVisible(false) ;  }  * Configures the visibility of the fields  * in edit mode depending on the user privileges public void setFieldEditAccess() { if (!AccessManager.canEditCasIndexDescription()) patientLie.setVisible(false) ;  if (!AccessManager.canEditCasIndexDescription()) typeRelation.setVisible(false) ;  }  * Manages editor updates when a field value changes private void setFieldValueChangeHandler() { registrations.add(requestFactory.getEventBus().addHandler( FieldValueChangeEvent.TYPE, new FieldValueChangeEvent.Handler() { @Override public void onValueChange(ImogField<?> field) { // field dependent visibility management computeVisibility(field, false) ;  }  } )) ;  }  * Computes the field visibility public void computeVisibility(ImogField<?> source, boolean allValidation) { }  public void setDeleteClickHandler(ClickHandler handler) { //registrations.add(clearImage.addClickHandler(handler)) ;  clearImage.addClickHandler(handler) ;  }  * Setter to inject a Patient value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setPatientLie(PatientProxy value, boolean isLocked) { patientLie.setLocked(isLocked) ;  patientLie.setValue(value) ;  }  private void clearPatientLieWidget() { patientLie.clear() ;  }  * Configures the handlers of the widgets that manage relation fields private void setRelationHandlers() { patientLie.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (patientLie.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  PatientFormPanel form = new PatientFormPanel( requestFactory, patientLie.getValue().getId(), relationPopup, "patientLie") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  patientLie.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  PatientFormPanel form = new PatientFormPanel(requestFactory, null, relationPopup, "patientLie") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SavePatientEvent.TYPE, new SavePatientEvent.Handler() { @Override public void savePatient(PatientProxy value) { patientLie.setValue(value) ;  }  @Override public void savePatient(PatientProxy value, String initField) { if (initField.equals("patientLie")) patientLie.setValue(value, true) ;  }  } )) ;  }  public void setIndex(int newIndex) { this.index = newIndex ;  }  public int getIndex() { return index ;  }  public boolean isNewProxy() { return isNewProxy ;  }  public void setNewProxy(boolean isNewProxy) { this.isNewProxy = isNewProxy ;  }  * Validate fields values public void validateFields() { // patientLie is a required field if (patientLie.getValue() == null) delegate.recordError(BaseNLS.messages().error_required(), null, "patientLie") ;  // typeRelation is a required field if (typeRelation.getValue() == null) delegate.recordError(BaseNLS.messages().error_required(), null, "typeRelation") ;  }  @Override public void setDelegate(EditorDelegate<CasIndexProxy> delegate) { this.delegate = delegate ;  }  @Override public void showErrors(List<EditorError> errors) { if (errors != null && errors.size() > 0) { List<EditorError> patientLieFieldErrors = new ArrayList<EditorError>() ;  List<EditorError> typeRelationFieldErrors = new ArrayList<EditorError>() ;  for (EditorError error : errors) { Object userData = error.getUserData() ;  if (userData != null && userData instanceof String) { String field = (String) userData ;  if (field.equals("patientLie")) patientLieFieldErrors.add(error) ;  if (field.equals("typeRelation")) typeRelationFieldErrors.add(error) ;  }  }  if (patientLieFieldErrors.size() > 0) patientLie.showErrors(patientLieFieldErrors) ;  if (typeRelationFieldErrors.size() > 0) typeRelation.showErrors(typeRelationFieldErrors) ;  }  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override protected void onLoad() { setRelationHandlers() ;  setFieldValueChangeHandler() ;  super.onLoad() ;  } }