package org.imogene.epicam.client.ui.editor ; public class ExamenBiologiqueEditor extends Composite implements Editor<ExamenBiologiqueProxy>, HasEditorDelegate<ExamenBiologiqueProxy>, HasEditorErrors<ExamenBiologiqueProxy> { interface Binder extends UiBinder<Widget, ExamenBiologiqueEditor> { }  private static final Binder BINDER = GWT.create(Binder.class) ;  protected final EpicamRequestFactory requestFactory ;  private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private EditorDelegate<ExamenBiologiqueProxy> delegate ;  private ExamenBiologiqueProxy editedValue ;  //Not used by the editor private boolean hideButtons = false ;  @UiField @Ignore FieldGroupPanel descriptionSection ;  @UiField(provided = true) ImogSingleRelationBox<PatientProxy> patient ;  private PatientDataProvider patientDataProvider ;  @UiField ImogDateBox date ;  @UiField ImogDoubleBox poids ;  @UiField ImogTextAreaBox observations ;  * Constructor * @param factory the application request factory * @param hideButtons true if the relation field buttons shall be hidden public ExamenBiologiqueEditor(EpicamRequestFactory factory, boolean hideButtons) { this.requestFactory = factory ;  this.hideButtons = hideButtons ;  setRelationFields() ;  initWidget(BINDER.createAndBindUi(this)) ;  properties() ;  }  * Constructor * @param factory the application request factory public ExamenBiologiqueEditor(EpicamRequestFactory factory) { this(factory, false) ;  }  * Sets the properties of the fields private void properties() { descriptionSection.setGroupTitle(NLS.constants() .examenBiologique_group_description()) ;  patient.setLabel(NLS.constants().examenBiologique_field_patient()) ;  date.setLabel(NLS.constants().examenBiologique_field_date()) ;  poids.setLabel(NLS.constants().examenBiologique_field_poids()) ;  observations.setLabel(NLS.constants() .examenBiologique_field_observations()) ;  }  * Configures the widgets that manage relation fields private void setRelationFields() { patientDataProvider = new PatientDataProvider(requestFactory) ;  if (hideButtons) // in popup, relation buttons hidden patient = new ImogSingleRelationBox<PatientProxy>( patientDataProvider, EpicamRenderer.get(), true) ;  else {// in wrapper panel, relation buttons enabled  if (AccessManager.canCreatePatient() && AccessManager.canEditPatient()) patient = new ImogSingleRelationBox<PatientProxy>( patientDataProvider, EpicamRenderer.get()) ;  else patient = new ImogSingleRelationBox<PatientProxy>(false, patientDataProvider, EpicamRenderer.get()) ;  }  }  * Sets the edition mode * @param isEdited true to enable the edition of the form public void setEdited(boolean isEdited) { if (isEdited) setFieldEditAccess() ;  else setFieldReadAccess() ;  patient.setEdited(isEdited) ;  date.setEdited(isEdited) ;  poids.setEdited(isEdited) ;  observations.setEdited(isEdited) ;  }  * Configures the visibility of the fields  * in view mode depending on the user privileges private void setFieldReadAccess() { if (!AccessManager.canReadExamenBiologiqueDescription()) descriptionSection.setVisible(false) ;  }  * Configures the visibility of the fields  * in edit mode depending on the user privileges private void setFieldEditAccess() { if (!AccessManager.canEditExamenBiologiqueDescription()) descriptionSection.setVisible(false) ;  }  * Sets the Request Context for the List Editors. public void setRequestContextForListEditors(ExamenBiologiqueRequest ctx) { }  * Manages editor updates when a field value changes private void setFieldValueChangeHandler() { registrations.add(requestFactory.getEventBus().addHandler( FieldValueChangeEvent.TYPE, new FieldValueChangeEvent.Handler() { @Override public void onValueChange(ImogField<?> field) { // field dependent visibility management computeVisibility(field, false) ;  }  } )) ;  }  * Computes the field visibility public void computeVisibility(ImogField<?> source, boolean allValidation) { }  * Setter to inject a Patient value * @param value the value to be injected into the editor * @param isLocked true if relation field shall be locked (non editable) public void setPatient(PatientProxy value, boolean isLocked) { patient.setLocked(isLocked) ;  patient.setValue(value) ;  }  private void clearPatientWidget() { patient.clear() ;  }  * Configures the handlers of the widgets that manage relation fields private void setRelationHandlers() { patient.setViewClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { if (patient.getValue() != null) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  PatientFormPanel form = new PatientFormPanel( requestFactory, patient.getValue().getId(), relationPopup, "patient") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  }  } ) ;  patient.setAddClickHandler(new ClickHandler() { @Override public void onClick(ClickEvent event) { RelationPopupPanel relationPopup = new RelationPopupPanel() ;  PatientFormPanel form = new PatientFormPanel(requestFactory, null, relationPopup, "patient") ;  relationPopup.addWidget(form) ;  relationPopup.show() ;  }  } ) ;  registrations.add(requestFactory.getEventBus().addHandler( SavePatientEvent.TYPE, new SavePatientEvent.Handler() { @Override public void savePatient(PatientProxy value) { patient.setValue(value) ;  }  @Override public void savePatient(PatientProxy value, String initField) { if (initField.equals("patient")) patient.setValue(value, true) ;  }  } )) ;  }  * Gets the ExamenBiologiqueProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities * @return public ExamenBiologiqueProxy getEditedValue() { return editedValue ;  }  * Sets the ExamenBiologiqueProxy that is edited in the Workflow * Not used by the editor * Temporary storage used to transmit the proxy to related entities  * @param editedValue  public void setEditedValue(ExamenBiologiqueProxy editedValue) { this.editedValue = editedValue ;  }  * public void raiseNotUniqueError(String field) { delegate.recordError(BaseNLS.messages().error_not_unique(), null, field) ;  }  * Validate fields values public void validateFields() { // patient is a required field if (patient.getValue() == null) delegate.recordError(BaseNLS.messages().error_required(), null, "patient") ;  // date is a required field if (date.getValueWithoutParseException() == null && date.isValid()) delegate.recordError(BaseNLS.messages().error_required(), null, "date") ;  // poids is a required field if (poids.getValueWithoutParseException() == null && poids.isValid()) delegate.recordError(BaseNLS.messages().error_required(), null, "poids") ;  }  private void setAllLabelWith(String width) { patient.setLabelWidth(width) ;  date.setLabelWidth(width) ;  poids.setLabelWidth(width) ;  observations.setLabelWidth(width) ;  }  private void setAllBoxWith(int width) { patient.setBoxWidth(width) ;  observations.setBoxWidth(width) ;  }  @Override public void setDelegate(EditorDelegate<ExamenBiologiqueProxy> delegate) { this.delegate = delegate ;  }  @Override public void showErrors(List<EditorError> errors) { if (errors != null && errors.size() > 0) { List<EditorError> patientFieldErrors = new ArrayList<EditorError>() ;  List<EditorError> dateFieldErrors = new ArrayList<EditorError>() ;  List<EditorError> poidsFieldErrors = new ArrayList<EditorError>() ;  for (EditorError error : errors) { Object userData = error.getUserData() ;  if (userData != null && userData instanceof String) { String field = (String) userData ;  if (field.equals("patient")) patientFieldErrors.add(error) ;  if (field.equals("date")) dateFieldErrors.add(error) ;  if (field.equals("poids")) poidsFieldErrors.add(error) ;  }  }  if (patientFieldErrors.size() > 0) patient.showErrors(patientFieldErrors) ;  if (dateFieldErrors.size() > 0) date.showErrors(dateFieldErrors) ;  if (poidsFieldErrors.size() > 0) poids.showErrors(poidsFieldErrors) ;  }  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override protected void onLoad() { setRelationHandlers() ;  setFieldValueChangeHandler() ;  super.onLoad() ;  } }