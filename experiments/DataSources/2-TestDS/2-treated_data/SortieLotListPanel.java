package org.imogene.epicam.client.ui.table.panel ; public class SortieLotListPanel extends Composite { private static final Binder uiBinder = GWT.create(Binder.class) ;  interface Binder extends UiBinder<Widget, SortieLotListPanel> { }  private static List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>() ;  private final EpicamRequestFactory requestFactory ;  private PopupButton filterButton ;  private PopupButton plusButton ;  private PopupButton listButton ;  private PushButton goHomeButton ;  @UiField(provided = true) ImogResources imogResources ;  @UiField(provided = true) WrapperPanelForTable wrapperPanel ;  @UiField(provided = true) SortieLotDynaTable listComposite ;  * Constructor * @param requestFactory * @param searchText text that will be used to filter the table entries public SortieLotListPanel(EpicamRequestFactory requestFactory, String searchText) { this.requestFactory = requestFactory ;  imogResources = GWT.create(ImogResources.class) ;  imogResources.imogStyle().ensureInjected() ;  wrapperPanel = new WrapperPanelForTable() ;  wrapperPanel.setTitle(NLS.constants().sortieLot_table_text()) ;  if (EpicamIconConstants.SORTIELOT_ICON != null) wrapperPanel.setIcon(EpicamIconConstants.SORTIELOT_ICON) ;  SortieLotDataProvider provider = new SortieLotDataProvider( requestFactory) ;  String filteringMessage = configureDataProvider(provider, searchText) ;  if (filteringMessage != null) wrapperPanel.setMessageLabel(filteringMessage) ;  if (AccessManager.canDeleteSortieLot() && AccessManager.canEditSortieLot()) listComposite = new SortieLotDynaTable(requestFactory, provider, true) ;  else listComposite = new SortieLotDynaTable(requestFactory, provider, false) ;  configureWrapperPanelForTable() ;  initWidget(uiBinder.createAndBindUi(this)) ;  }  * Constructor * @param requestFactory public SortieLotListPanel(EpicamRequestFactory requestFactory) { this(requestFactory, null) ;  }  * Configures the Data provider that enables to get the data to feed the table that lists SortieLot entries * @param provider * @param searchText * @return private String configureDataProvider(SortieLotDataProvider provider, String searchText) { String filteringMessage = null ;  if (searchText != null) { filteringMessage = provider.fullTextSearch(searchText) ;  LocalSession.get().setSearchCriterions( provider.getSearchCriterions(), filteringMessage) ;  }  else { ImogJunctionProxy searchCriterions = LocalSession.get() .getSearchCriterions() ;  if (searchCriterions != null) { provider.setSearchCriterions(searchCriterions) ;  filteringMessage = LocalSession.get().getFilteringMessage() ;  }  }  return filteringMessage ;  }  * Configures the Wrapper panel to manage the actions that are related to the table that lists SortieLot entries private void configureWrapperPanelForTable() { ImogFilterPanel filterPanel = listComposite.getFilterPanel() ;  Command createCommand = listComposite.getCreateCommand() ;  Command exportButton = listComposite.getCsvExportButton() ;  PushButton deleteButton = listComposite.getDeleteButton() ;  // add pager wrapperPanel.addHeaderWidget(listComposite.getTablePager()) ;  // add filter panel setFilterButton(filterPanel) ;  // add create and export buttons setOtherActions(createCommand, exportButton) ;  // add delete button if (deleteButton != null) wrapperPanel.addHeaderWidget(deleteButton) ;  // add goHome button wrapperPanel.addHeaderWidget(goHomeButton()) ;  }  * Adds a Filter button that enables to filter the table entries to the wrapper panel * @param eventBus private void setFilterButton(ImogFilterPanel filterPanel) { if (filterPanel != null) { filterButton = new PopupButton(BaseNLS.constants().button_filter()) ;  filterButton.addPopupPanelContent(filterPanel) ;  wrapperPanel.addHeaderWidget(filterButton) ;  }  }  * Adds create and export buttons to the wrapper panel * @param createCommand * @param exportButton private void setOtherActions(Command createCommand, Command exportCommand) { if (createCommand != null || exportCommand != null) { plusButton = new PopupButton(BaseNLS.constants().button_plus()) ;  if (createCommand != null) { SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), BaseNLS.constants() .button_create(), createCommand) ;  plusButton.addPopupPanelContent(item) ;  }  if (exportCommand != null) { SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), BaseNLS.constants() .button_export(), exportCommand) ;  plusButton.addPopupPanelContent(item) ;  }  wrapperPanel.addHeaderWidget(plusButton) ;  }  }  *  * @param eventBus private void setListActions() { listButton = new PopupButton(BaseNLS.constants().button_list()) ;  if (AccessManager.canDirectAccessPatient() && AccessManager.canReadPatient()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/patient/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .patient_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessCasTuberculose() && AccessManager.canReadCasTuberculose()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/castuberculose/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .casTuberculose_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessTransfertReference() && AccessManager.canReadTransfertReference()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/transfertreference/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .transfertReference_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessRegime() && AccessManager.canReadRegime()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/regime/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .regime_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessExamenATB() && AccessManager.canReadExamenATB()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/examenatb/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .examenATB_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessExamenBiologique() && AccessManager.canReadExamenBiologique()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/examenbiologique/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .examenBiologique_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessExamenMicroscopie() && AccessManager.canReadExamenMicroscopie()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem( TokenHelper.TK_LIST + "/examenmicroscopie/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .examenMicroscopie_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessExamenSerologie() && AccessManager.canReadExamenSerologie()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/examenserologie/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .examenSerologie_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessLot() && AccessManager.canReadLot()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/lot/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .lot_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessCommande() && AccessManager.canReadCommande()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/commande/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .commande_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessReception() && AccessManager.canReadReception()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/reception/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .reception_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessRavitaillement() && AccessManager.canReadRavitaillement()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/ravitaillement/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .ravitaillement_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessInventaire() && AccessManager.canReadInventaire()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/inventaire/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .inventaire_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessHorsUsage() && AccessManager.canReadHorsUsage()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/horsusage/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .horsUsage_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessEntreeLot() && AccessManager.canReadEntreeLot()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/entreelot/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .entreeLot_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessSmsPredefini() && AccessManager.canReadSmsPredefini()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/smspredefini/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .smsPredefini_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessOutBox() && AccessManager.canReadOutBox()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/outbox/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .outBox_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessFormation() && AccessManager.canReadFormation()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/formation/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .formation_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessTutoriel() && AccessManager.canReadTutoriel()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/tutoriel/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .tutoriel_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessRegion() && AccessManager.canReadRegion()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/region/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .region_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessDistrictSante() && AccessManager.canReadDistrictSante()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/districtsante/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .districtSante_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessCentreDiagTrait() && AccessManager.canReadCentreDiagTrait()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/centrediagtrait/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .centreDiagTrait_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessLaboratoireReference() && AccessManager.canReadLaboratoireReference()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/laboratoirereference/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .laboratoireReference_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessLieuDit() && AccessManager.canReadLieuDit()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/lieudit/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .lieuDit_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessMedicament() && AccessManager.canReadMedicament()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/medicament/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .medicament_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessIntrant() && AccessManager.canReadIntrant()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/intrant/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .intrant_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessPersonnel() && AccessManager.canReadPersonnel()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/personnel/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .personnel_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessDepartPersonnel() && AccessManager.canReadDepartPersonnel()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/departpersonnel/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .departPersonnel_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessArriveePersonnel() && AccessManager.canReadArriveePersonnel()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/arriveepersonnel/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .arriveePersonnel_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessUtilisateur() && AccessManager.canReadUtilisateur()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/utilisateur/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .utilisateur_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  if (AccessManager.canDirectAccessQualification() && AccessManager.canReadQualification()) { Command command = new Command() { public void execute() { LocalSession.get().setSearchCriterions(null, null) ;  History.newItem(TokenHelper.TK_LIST + "/qualification/", true) ;  }  }  ;  SimpleMenuItem item = new SimpleMenuItem( requestFactory.getEventBus(), NLS.constants() .qualification_name_plur(), command) ;  listButton.addPopupPanelContent(item) ;  }  wrapperPanel.addHeaderWidget(listButton) ;  }  * Adds a button that enables to go the the Home panel * @param eventBus * @return private PushButton goHomeButton() { goHomeButton = new PushButton(BaseNLS.constants().button_home()) ;  goHomeButton.setStyleName(imogResources.imogStyle().imogButton()) ;  goHomeButton.addStyleName(imogResources.imogStyle().imogButton2()) ;  goHomeButton.addStyleName("Dynatable-Button") ;  return goHomeButton ;  }  *  private void setButtonHandlers() { final EventBus eventBus = requestFactory.getEventBus() ;  // Handler for filterButton if (filterButton != null) { registrations.add(eventBus.addHandler(IsTableFilteredEvent.TYPE, new IsTableFilteredEvent.Handler() { @Override public void noticeFilteringChange(Boolean isFiltered, String message) { if (isFiltered) { filterButton.setButtonActivatedStyle() ;  wrapperPanel.setMessageLabel(message) ;  }  else { filterButton.removeButtonActivatedStyle() ;  wrapperPanel.clearMessageLabel() ;  }  }  } )) ;  }  // Handler for plusButton if (plusButton != null) { registrations.add(eventBus.addHandler(SelectMenuItemEvent.TYPE, new SelectMenuItemEvent.Handler() { @Override public void selectMenuItem(SimpleMenuItem menuItem) { plusButton.hidePopup() ;  }  } )) ;  }  // Handler for listButton  if (listButton != null) { registrations.add(eventBus.addHandler(SelectMenuItemEvent.TYPE, new SelectMenuItemEvent.Handler() { @Override public void selectMenuItem(SimpleMenuItem menuItem) { listButton.hidePopup() ;  }  } )) ;  }  // Handler for goHomeButton  if (goHomeButton != null) { registrations.add(goHomeButton.addClickHandler(new ClickHandler() { public void onClick(ClickEvent event) { History.newItem(TokenHelper.TK_CLASSIC, true) ;  }  } )) ;  }  }  @Override protected void onUnload() { for (HandlerRegistration r : registrations) r.removeHandler() ;  registrations.clear() ;  super.onUnload() ;  }  @Override protected void onLoad() { setButtonHandlers() ;  super.onLoad() ;  } }